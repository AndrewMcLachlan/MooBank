[{"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\index.tsx":"1","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\serviceWorker.ts":"2","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\App.tsx":"3","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\index.ts":"4","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\ManageAccounts.tsx":"5","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\Import.tsx":"6","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\createAccount\\CreateAccount.tsx":"7","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\Home\\Home.tsx":"8","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\Transactions.tsx":"9","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTagRules\\TransactionTagRules.tsx":"10","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\settings\\index.ts":"11","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\index.ts":"12","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\extensions.ts":"13","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\createAccount\\ImportSettings.tsx":"14","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionList.tsx":"15","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTagRules\\TransactionTagRuleRow.tsx":"16","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\ClickableIcon.tsx":"17","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\settings\\Settings.tsx":"18","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\TransactionTags.tsx":"19","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\index.ts":"20","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\index.ts":"21","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\App.ts":"22","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Transactions.ts":"23","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionRow.tsx":"24","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionRowIng.tsx":"25","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\TagPanel.tsx":"26","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTagRule.ts":"27","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTag.ts":"28","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Transaction.ts":"29","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\ImporterType.ts":"30","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Account.ts":"31","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\index.ts":"32","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\TransactionTagRow.tsx":"33","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\Upload.tsx":"34","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\PageHeader.tsx":"35","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\ComboBox.tsx":"36","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\CloseBadge.tsx":"37","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\index.ts":"38","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountSummary.tsx":"39","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountBalance.tsx":"40","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionTagRuleService.ts":"41","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionService.ts":"42","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionTagService.ts":"43","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ReferenceDataService.ts":"44","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ImportService.ts":"45","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\AccountList.tsx":"46","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\HttpClient.ts":"47","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ServiceBase.ts":"48","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\Alert.tsx":"49","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\VirtualAccountRow.tsx":"50","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\AccountRow.tsx":"51","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\ManualAccountRow.tsx":"52","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\index.ts":"53","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\clickAway.ts":"54","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\pageTitle.ts":"55","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\helpers\\index.ts":"56","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\helpers\\renderingHelpers.ts":"57","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\configureStore.ts":"58","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Layout.tsx":"59","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Footer.tsx":"60","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Header.tsx":"61","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AppProvider.tsx":"62","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Accounts.ts":"63","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\AccountService.ts":"64","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Transactions.ts":"65","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTagRules.ts":"66","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\HttpClientProvider.tsx":"67","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\useApiGet.ts":"68","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\useApiPost.ts":"69","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\MsalProvider.tsx":"70","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\VirtualAccount.ts":"71","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\api.ts":"72","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\useApiPut.ts":"73","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\useApiPatch.ts":"74","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\useApiDelete.ts":"75"},{"size":847,"mtime":1608639460754,"results":"76","hashOfConfig":"77"},{"size":5222,"mtime":1566246575692,"results":"78","hashOfConfig":"77"},{"size":2808,"mtime":1608644472725,"results":"79","hashOfConfig":"77"},{"size":309,"mtime":1572091479221,"results":"80","hashOfConfig":"77"},{"size":64,"mtime":1566418604182,"results":"81","hashOfConfig":"77"},{"size":877,"mtime":1609027763326,"results":"82","hashOfConfig":"77"},{"size":4650,"mtime":1608704943279,"results":"83","hashOfConfig":"77"},{"size":236,"mtime":1608435009959,"results":"84","hashOfConfig":"77"},{"size":764,"mtime":1608514081447,"results":"85","hashOfConfig":"77"},{"size":4239,"mtime":1609028339553,"results":"86","hashOfConfig":"77"},{"size":29,"mtime":1572091400242,"results":"87","hashOfConfig":"77"},{"size":36,"mtime":1572091445404,"results":"88","hashOfConfig":"77"},{"size":393,"mtime":1572070018897,"results":"89","hashOfConfig":"77"},{"size":1201,"mtime":1608532213150,"results":"90","hashOfConfig":"77"},{"size":3506,"mtime":1609381148606,"results":"91","hashOfConfig":"77"},{"size":3080,"mtime":1608547652326,"results":"92","hashOfConfig":"77"},{"size":450,"mtime":1571521196288,"results":"93","hashOfConfig":"77"},{"size":221,"mtime":1572090131652,"results":"94","hashOfConfig":"77"},{"size":3187,"mtime":1608548560952,"results":"95","hashOfConfig":"77"},{"size":385,"mtime":1608639596698,"results":"96","hashOfConfig":"77"},{"size":302,"mtime":1608644934688,"results":"97","hashOfConfig":"77"},{"size":790,"mtime":1608511890840,"results":"98","hashOfConfig":"77"},{"size":862,"mtime":1608644661678,"results":"99","hashOfConfig":"77"},{"size":2733,"mtime":1609028325139,"results":"100","hashOfConfig":"77"},{"size":2672,"mtime":1608548294492,"results":"101","hashOfConfig":"77"},{"size":2016,"mtime":1609029538444,"results":"102","hashOfConfig":"77"},{"size":148,"mtime":1571141301134,"results":"103","hashOfConfig":"77"},{"size":834,"mtime":1572005278681,"results":"104","hashOfConfig":"77"},{"size":467,"mtime":1573039633530,"results":"105","hashOfConfig":"77"},{"size":70,"mtime":1572046962945,"results":"106","hashOfConfig":"77"},{"size":585,"mtime":1572179394907,"results":"107","hashOfConfig":"77"},{"size":235,"mtime":1608514611820,"results":"108","hashOfConfig":"77"},{"size":2791,"mtime":1609029609773,"results":"109","hashOfConfig":"77"},{"size":3348,"mtime":1572679728688,"results":"110","hashOfConfig":"77"},{"size":1334,"mtime":1608512786269,"results":"111","hashOfConfig":"77"},{"size":3849,"mtime":1579422082686,"results":"112","hashOfConfig":"77"},{"size":888,"mtime":1608423660494,"results":"113","hashOfConfig":"77"},{"size":30,"mtime":1571572220006,"results":"114","hashOfConfig":"77"},{"size":1649,"mtime":1608435148104,"results":"115","hashOfConfig":"77"},{"size":369,"mtime":1570912965506,"results":"116","hashOfConfig":"77"},{"size":3495,"mtime":1609028282209,"results":"117","hashOfConfig":"77"},{"size":1727,"mtime":1609027984842,"results":"118","hashOfConfig":"77"},{"size":2898,"mtime":1609028326428,"results":"119","hashOfConfig":"77"},{"size":200,"mtime":1608639178387,"results":"120","hashOfConfig":"77"},{"size":1574,"mtime":1608703639020,"results":"121","hashOfConfig":"77"},{"size":2372,"mtime":1608514334192,"results":"122","hashOfConfig":"77"},{"size":5359,"mtime":1608645101526,"results":"123","hashOfConfig":"77"},{"size":1043,"mtime":1608512114108,"results":"124","hashOfConfig":"77"},{"size":437,"mtime":1570884624749,"results":"125","hashOfConfig":"77"},{"size":1316,"mtime":1608465922472,"results":"126","hashOfConfig":"77"},{"size":2047,"mtime":1608644516946,"results":"127","hashOfConfig":"77"},{"size":2990,"mtime":1608435005811,"results":"128","hashOfConfig":"77"},{"size":60,"mtime":1608514235298,"results":"129","hashOfConfig":"77"},{"size":538,"mtime":1571659541243,"results":"130","hashOfConfig":"77"},{"size":258,"mtime":1608510889280,"results":"131","hashOfConfig":"77"},{"size":35,"mtime":1572176577103,"results":"132","hashOfConfig":"77"},{"size":120,"mtime":1572176566907,"results":"133","hashOfConfig":"77"},{"size":972,"mtime":1608644457711,"results":"134","hashOfConfig":"77"},{"size":455,"mtime":1571572556359,"results":"135","hashOfConfig":"77"},{"size":251,"mtime":1566417716723,"results":"136","hashOfConfig":"77"},{"size":1300,"mtime":1608510941989,"results":"137","hashOfConfig":"77"},{"size":608,"mtime":1608510857825,"results":"138","hashOfConfig":"77"},{"size":113,"mtime":1608513512960,"results":"139","hashOfConfig":"77"},{"size":1140,"mtime":1609036338704,"results":"140","hashOfConfig":"77"},{"size":174,"mtime":1608532460631,"results":"141","hashOfConfig":"77"},{"size":118,"mtime":1608548439739,"results":"142","hashOfConfig":"77"},{"size":1172,"mtime":1608639521681,"results":"143","hashOfConfig":"77"},{"size":724,"mtime":1608644378198,"results":"144","hashOfConfig":"77"},{"size":1354,"mtime":1609028271335,"results":"145","hashOfConfig":"77"},{"size":7244,"mtime":1608639583624,"results":"146","hashOfConfig":"77"},{"size":90,"mtime":1608644937823,"results":"147","hashOfConfig":"77"},{"size":156,"mtime":1608701948102,"results":"148","hashOfConfig":"77"},{"size":839,"mtime":1609027914923,"results":"149","hashOfConfig":"77"},{"size":497,"mtime":1608701942851,"results":"150","hashOfConfig":"77"},{"size":428,"mtime":1608700414927,"results":"151","hashOfConfig":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"1otw1ip",{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"154"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"154"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"187","usedDeprecatedRules":"154"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"154"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"201","usedDeprecatedRules":"154"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"204","usedDeprecatedRules":"154"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"207","usedDeprecatedRules":"154"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"210","usedDeprecatedRules":"154"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"219","usedDeprecatedRules":"154"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"228","usedDeprecatedRules":"154"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"237","usedDeprecatedRules":"154"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"154"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"154"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"154"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"154"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"154"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"269","usedDeprecatedRules":"270"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"273","usedDeprecatedRules":"154"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"276","usedDeprecatedRules":"154"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"154"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"294","usedDeprecatedRules":"154"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"297","usedDeprecatedRules":"154"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"154"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\index.tsx",[],["327","328"],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\serviceWorker.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\App.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\ManageAccounts.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\Import.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\createAccount\\CreateAccount.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\Home\\Home.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\Transactions.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTagRules\\TransactionTagRules.tsx",["329","330","331","332","333"],"import \"./TransactionTagRules.scss\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport { State } from \"../../store/state\";\r\n\r\nimport { TagPanel, PageHeader } from \"../../components\";\r\n\r\nimport { TransactionTag, TransactionTagRule } from \"../../models\";\r\nimport { RouteComponentProps, useParams } from \"react-router\";\r\nimport { usePageTitle } from \"../../hooks\";\r\n\r\nimport { TransactionTagRuleRow } from \"./TransactionTagRuleRow\";\r\nimport { ClickableIcon } from \"../../components/ClickableIcon\";\r\nimport { useCreateRule, useCreateTag, useRules, useRunRules, useTags, useTransactions } from \"../../services\";\r\n\r\nexport const TransactionTagRules: React.FC = () => {\r\n\r\n    usePageTitle(\"Transaction Tag Rules\");\r\n\r\n    const { accountId } = useParams<any>();\r\n\r\n    const rulesQuery = useRules(accountId);\r\n    const { data } = rulesQuery;\r\n\r\n    console.debug(rulesQuery);\r\n\r\n    const { newRule, fullTagsList, addTag, createTag, removeTag, nameChange, createRule, runRules } = useComponentState(accountId);\r\n\r\n    return (\r\n        <>\r\n            <PageHeader title=\"Transaction Tag Rules\" menuItems={[\r\n                { text: \"Run Rules Now\", onClick: runRules }\r\n            ]} />\r\n            <Table striped bordered={false} borderless className=\"transaction-tag-rules\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>When a transaction contains</th>\r\n                        <th>Apply tag(s)</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td><input type=\"text\" placeholder=\"Transaction description contains...\" value={newRule.contains} onChange={nameChange} /></td>\r\n                        <TagPanel as=\"td\" selectedItems={newRule.tags} allItems={fullTagsList} textField=\"name\" valueField=\"id\" onAdd={addTag} onCreate={createTag} onRemove={removeTag} allowCreate={false} alwaysShowEditPanel={true} />\r\n                        <td><span onClick={createRule}><ClickableIcon icon=\"check-circle\" title=\"Save\" /></span></td>\r\n                    </tr>\r\n                    {data?.rules && data.rules.map((r) => <TransactionTagRuleRow key={r.id} accountId={accountId} rule={r} />)}\r\n                </tbody>\r\n            </Table>\r\n        </>\r\n    );\r\n}\r\n\r\nTransactionTagRules.displayName = \"TransactionTagRules\";\r\n\r\nconst useComponentState = (accountId: string) => {\r\n\r\n    const blankRule = { id: 0, contains: \"\", tags: [] } as TransactionTagRule;\r\n\r\n    const fullTagsListQuery = useTags();\r\n    const fullTagsList = fullTagsListQuery.data ?? [];\r\n\r\n    const [newRule, setNewRule] = useState(blankRule);\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    const createTransactionTag = useCreateTag();\r\n    const createTransactionTagRule = useCreateRule();\r\n    const runTransactionTagRules = useRunRules();\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !newRule.tags.some((tt) => t.id === tt.id)));\r\n    }, [newRule.tags, fullTagsListQuery]);\r\n\r\n    const createRule = () => {\r\n        createTransactionTagRule.mutate([{ accountId }, newRule]);\r\n        setNewRule(blankRule);\r\n    }\r\n\r\n    const nameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewRule({ ...newRule, contains: e.currentTarget.value });\r\n    }\r\n\r\n    const createTag = (name: string) => {\r\n        createTransactionTag.mutate({ name });\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        //dispatch(actionCreators.addTransactionTag(props.transaction.id, tag.id));\r\n        //setTags(tags.concat([tag]));\r\n        newRule.tags.push(tag);\r\n        setNewRule(newRule);\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        newRule.tags = newRule.tags.filter((t) => t.id !== tag.id);\r\n        setNewRule(newRule);\r\n    };\r\n\r\n    const runRules = () => {\r\n        runTransactionTagRules.mutate({ accountId });\r\n    };\r\n\r\n    return {\r\n        newRule,\r\n        fullTagsList,\r\n\r\n        createTag,\r\n        addTag,\r\n        removeTag,\r\n\r\n        nameChange,\r\n        createRule,\r\n\r\n        runRules,\r\n    };\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\settings\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\extensions.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\createAccount\\ImportSettings.tsx",["334","335"],"import React, { useState } from \"react\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { State } from \"../../store/state\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { useImporterTypes } from \"../../services\";\r\n\r\nexport const ImportSettings: React.FC<ImportSettingsProps> = (props) => {\r\n\r\n    const importerTypes = useImporterTypes();\r\n\r\n    const [selectedId, setSelectedId] = useState(0);\r\n\r\n    return (\r\n        <Form.Group controlId=\"importer-type\" hidden={!props.show}>\r\n            <Form.Label>Importer Type</Form.Label>\r\n            <Form.Control as=\"select\" value={selectedId.toString()} required onChange={(e) => { setSelectedId(parseInt(e.currentTarget.value)); props.onChange && props.onChange(parseInt(e.currentTarget.value)) }}>\r\n                <option value=\"0\">Select...</option>\r\n                {importerTypes.data?.map(a =>\r\n                    <option value={a.id} key={a.id}>{a.type}</option>\r\n                )}\r\n            </Form.Control>\r\n        </Form.Group>\r\n    );\r\n}\r\n\r\nImportSettings.displayName = \"AccountControllerSettings\";\r\n\r\nexport interface ImportSettingsProps {\r\n    show: boolean;\r\n    onChange?: (id: number) => void;\r\n    selectedId: number;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionList.tsx",["336","337"],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTagRules\\TransactionTagRuleRow.tsx",["338","339"],"﻿import React, { useState, useEffect } from \"react\";\r\n\r\nimport { TransactionTagRule, TransactionTag } from \"../../models\";\r\nimport { TagPanel } from \"../../components/TagPanel\";\r\nimport { ClickableIcon } from \"../../components/ClickableIcon\";\r\nimport { useCreateTag, useTags } from \"../../services/TransactionTagService\";\r\nimport { useAddTransactionTagRuleTag, useDeleteRule, useRemoveTransactionTagRuleTag } from \"../../services\";\r\n\r\nexport const TransactionTagRuleRow: React.FC<TransactionTagRuleRowProps> = (props) => {\r\n\r\n    const transactionRow = useTransactionTagRuleRowEvents(props);\r\n\r\n    const fullTagsListQuery = useTags();\r\n    const fullTagsList = fullTagsListQuery.data ?? [];\r\n\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !transactionRow.tags.some((tt) => t.id === tt.id)));\r\n    }, [transactionRow.tags, fullTagsList]);\r\n\r\n    return (\r\n        <tr>\r\n            <td>{props.rule.contains}</td>\r\n            <TagPanel as=\"td\" selectedItems={transactionRow.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={transactionRow.addTag} onRemove={transactionRow.removeTag} onCreate={transactionRow.createTag} allowCreate={true} />\r\n            <td><span onClick={transactionRow.deleteRule}><ClickableIcon icon=\"trash-alt\" title=\"Delete\" /></span></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nTransactionTagRuleRow.displayName = \"TransactionTagRuleRow\";\r\n\r\nfunction useTransactionTagRuleRowEvents(props: TransactionTagRuleRowProps) {\r\n\r\n    const createTransactionTag = useCreateTag();\r\n    const addTransactionTagRuleTag = useAddTransactionTagRuleTag();\r\n    const removeTransactionTagRuleTag = useRemoveTransactionTagRuleTag();\r\n    \r\n    const deleteTransactionTagRule = useDeleteRule();\r\n\r\n    const [tags, setTags] = useState(props.rule.tags);\r\n\r\n    useEffect(() => {\r\n        setTags(props.rule.tags);\r\n    }, [props.rule.tags]);\r\n\r\n    const deleteRule = () => {\r\n        deleteTransactionTagRule.mutate({accountId: props.accountId, ruleId: props.rule.id});\r\n    };\r\n\r\n    const createTag = (name: string) => {\r\n        createTransactionTag.mutate({ name }, {\r\n            onSuccess: (data) => {\r\n                addTransactionTagRuleTag.mutate({ accountId: props.accountId, ruleId: props.rule.id, tagId: data.id});\r\n            }\r\n        });\r\n    };\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        addTransactionTagRuleTag.mutate({ accountId: props.accountId, ruleId: props.rule.id, tagId: tag.id});\r\n        setTags([ ...tags, tag]);\r\n    };\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        removeTransactionTagRuleTag.mutate({ accountId: props.accountId, ruleId: props.rule.id, tagId: tag.id});\r\n        setTags(tags.filter((t) => t.id !== tag.id));\r\n    };\r\n\r\n    return {\r\n        deleteRule,\r\n        createTag,\r\n        addTag,\r\n        removeTag,\r\n        tags,\r\n    };\r\n}\r\n\r\nexport interface TransactionTagRuleRowProps {\r\n    rule: TransactionTagRule;\r\n    accountId: string;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\ClickableIcon.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\settings\\Settings.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\TransactionTags.tsx",["340","341","342"],"import \"./TransactionTags.scss\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport { TransactionTagRow } from \"./TransactionTagRow\";\r\n\r\nimport { TagPanel } from \"../../components\";\r\nimport { TransactionTag } from \"../../models\";\r\nimport { ClickableIcon } from \"../../components/ClickableIcon\";\r\nimport { usePageTitle } from \"../../hooks\";\r\nimport { useAddSubTag, useCreateTag, useRemoveSubTag, useTags } from \"../../services\";\r\n\r\nexport const TransactionTags: React.FC = () => {\r\n\r\n    usePageTitle(\"Tags\");\r\n\r\n    const { newTag, fullTagsList, tagsList, addTag, createTag, removeTag, nameChange } = useComponentState();\r\n\r\n    return (\r\n        <>\r\n        <h1>Transaction Tags</h1>\r\n        <Table striped bordered={false} borderless className=\"transaction-tags\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Tags</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td><input type=\"text\" placeholder=\"Tag name\" value={newTag.name} onChange={nameChange} /></td>\r\n                    <TagPanel as=\"td\" selectedItems={newTag.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={addTag} onCreate={createTag} onRemove={removeTag} allowCreate={false} alwaysShowEditPanel={true} />\r\n                    <td><span onClick={createTag}><ClickableIcon icon=\"check-circle\" title=\"Save\" /></span></td>\r\n                </tr>\r\n                {fullTagsList && fullTagsList.map((t) => <TransactionTagRow key={t.id} tag={t} />)}\r\n            </tbody>\r\n        </Table>\r\n        </>\r\n    );\r\n}\r\n\r\nconst useComponentState = () => {\r\n\r\n    const blankTag = {id: 0, name: \"\", tags: []} as TransactionTag;\r\n\r\n    const fullTagsListQuery = useTags();\r\n    const fullTagsList = fullTagsListQuery.data ?? [];\r\n\r\n    \r\n    const createTransactionTag = useCreateTag();\r\n    const addSubTag = useAddSubTag();\r\n    const removeSubTag = useRemoveSubTag();\r\n    \r\n\r\n    const [newTag, setNewTag] = useState(blankTag); \r\n    const [tagsList, setTagsList] = useState([]);\r\n  \r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !newTag.tags.some((tt) => t.id === tt.id)));\r\n    }, [newTag.tags, fullTagsList]);\r\n\r\n    const createTag = () => {\r\n        createTransactionTag.mutate(newTag);\r\n        setNewTag(blankTag);\r\n    }\r\n\r\n    const createSubTag = (name: string) => {\r\n        createTransactionTag.mutate({ name });\r\n    }\r\n\r\n    const nameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewTag({...newTag, name: e.currentTarget.value});\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        newTag.tags.push(tag);\r\n        setNewTag(newTag);\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        newTag.tags = newTag.tags.filter((t) => t.id !== tag.id);\r\n        setNewTag(newTag);\r\n    }\r\n\r\n    return {\r\n        newTag,\r\n        fullTagsList,\r\n        tagsList,\r\n        \r\n        createTag,\r\n        createSubTag,\r\n        addTag,\r\n        removeTag,\r\n\r\n        nameChange,\r\n    };\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\App.ts",["343"],"﻿import { App } from \"./state\";\r\nimport { ActionWithData } from \"./redux-extensions\";\r\nimport { Dispatch } from \"react\";\r\n\r\nexport const initialState: App = {\r\n    baseUrl: \"/\",\r\n};\r\n\r\nexport const ShowMessage = \"ShowMessage\";\r\n\r\nexport const genericCaller = (dispatch: Dispatch<ActionWithData<string>>, callback: () => any) => {\r\n    try {\r\n        return callback();\r\n    }\r\n    catch (error) {\r\n        dispatch({ type: \"ShowMessage\", data: (error as Error).message});\r\n    }\r\n}\r\n\r\nexport const reducer = (state: App, action:ActionWithData<string>) => {\r\n    state = state || initialState;\r\n\r\n    switch (action.type) {\r\n        case \"ShowMessage\":\r\n            return {\r\n                ...state,\r\n                message: action.data,\r\n            }\r\n    }\r\n\r\n    return state;\r\n};\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Transactions.ts",["344","345","346"],"﻿import { Dispatch } from \"redux\";\r\n\r\nimport { ActionWithData } from \"./redux-extensions\";\r\nimport { Transactions, State } from \"./state\";\r\n\r\nexport const SetTransactionListFilter = \"SetTransactionListFilter\";\r\nexport const SetCurrentPage = \"SetCurrentPage\";\r\n\r\nconst initialState: Transactions = {\r\n    currentPage: 1,\r\n    pageSize: 50,\r\n    total: 0,\r\n    filterTagged: false,\r\n};\r\n\r\nexport const reducer = (state: Transactions = initialState, action: ActionWithData<any>): Transactions => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SetCurrentPage:\r\n            return {\r\n                ...state,\r\n                currentPage: action.data\r\n            };\r\n\r\n        case SetTransactionListFilter: {\r\n            return {\r\n                ...state,\r\n                filterTagged: action.data,\r\n            }\r\n        }\r\n    }\r\n\r\n    return state;\r\n};\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionRow.tsx",["347","348","349"],"﻿import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport { Transaction, TransactionTag } from \"../../models\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { TagPanel } from \"../../components\";\r\nimport { useAddTransactionTag, useCreateTag, useRemoveTransactionTag, useTags } from \"../../services\";\r\n\r\nexport const TransactionRow: React.FC<TransactionRowProps> = (props) => {\r\n\r\n    //const [editMode, setEditMode] = useState(false);\r\n    const transactionRow = useTransactionRowEvents(props);\r\n\r\n    const fullTagsListQuery = useTags();\r\n    const fullTagsList = fullTagsListQuery.data ?? [];\r\n\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !transactionRow.tags.some((tt) => t.id === tt.id)));\r\n    }, [transactionRow.tags, fullTagsList]);\r\n\r\n    return (\r\n        <tr>\r\n            <td>{moment(props.transaction.transactionTime).format(\"YYYY-MM-DD\")}</td>\r\n            <td>{props.transaction.description}</td>\r\n            <td>{props.transaction.amount.toLocaleString(\"en-AU\", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n            <TagPanel as=\"td\" selectedItems={transactionRow.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={transactionRow.addTag} onRemove={transactionRow.removeTag} onCreate={transactionRow.createTag} allowCreate={true} />\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction useTransactionRowEvents(props: TransactionRowProps) {\r\n\r\n    const [tags, setTags] = useState(props.transaction.tags);\r\n\r\n    const addTransactionTag = useAddTransactionTag();\r\n    const removeTransactionTag = useRemoveTransactionTag();\r\n    const createTransactionTag = useCreateTag();\r\n\r\n    useEffect(() => {\r\n        setTags(props.transaction.tags);\r\n    }, [props.transaction.tags]);\r\n\r\n    const createTag = (name: string) => {\r\n        createTransactionTag.mutate({ name }, {\r\n            onSuccess: (data) => {\r\n                addTransactionTag.mutate({ transactionId: props.transaction.id, tagId: data.id});\r\n            }\r\n        });\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        addTransactionTag.mutate({ transactionId: props.transaction.id, tagId: tag.id });\r\n        setTags(tags.concat([tag]));\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        removeTransactionTag.mutate({ transactionId: props.transaction.id, tagId: tag.id });\r\n        setTags(tags.filter((t) => t.id !== tag.id));\r\n    }\r\n\r\n    return {\r\n        createTag,\r\n        addTag,\r\n        removeTag,\r\n        tags,\r\n    };\r\n}\r\n\r\nexport interface TransactionRowProps {\r\n    transaction: Transaction;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionRowIng.tsx",["350","351","352"],"﻿import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport { Transaction, TransactionTag } from \"../../models\";\r\nimport { TagPanel } from \"../../components\";\r\nimport { TransactionRowProps } from \"./TransactionRow\";\r\nimport { useAddTransactionTag, useCreateTag, useRemoveTransactionTag, useTags } from \"../../services\";\r\n\r\nexport const TransactionRowIng: React.FC<TransactionRowProps> = (props) => {\r\n\r\n    const transactionRow = useTransactionRowEvents(props);\r\n\r\n    const fullTagsListQuery = useTags();\r\n    const fullTagsList = fullTagsListQuery.data ?? [];\r\n\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !transactionRow.tags.some((tt) => t.id === tt.id)));\r\n    }, [transactionRow.tags, fullTagsList]);\r\n\r\n    return (\r\n        <tr>\r\n            <td>{moment(props.transaction.transactionTime).format(\"YYYY-MM-DD\")}</td>\r\n            <td>{props.transaction.description}</td>\r\n            <td>{props.transaction.amount.toLocaleString(\"en-AU\", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n            <TagPanel as=\"td\" selectedItems={transactionRow.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={transactionRow.addTag} onRemove={transactionRow.removeTag} onCreate={transactionRow.createTag} allowCreate={true} />\r\n        </tr>\r\n    );\r\n}\r\n\r\nTransactionRowIng.displayName = \"TransactionRowIng\";\r\n\r\nfunction useTransactionRowEvents(props: TransactionRowProps) {\r\n\r\n    const [tags, setTags] = useState(props.transaction.tags);\r\n\r\n    const addTransactionTag = useAddTransactionTag();\r\n    const removeTransactionTag = useRemoveTransactionTag();\r\n    const createTransactionTag = useCreateTag();\r\n\r\n    useEffect(() => {\r\n        setTags(props.transaction.tags);\r\n    }, [props.transaction.tags]);\r\n\r\n    const createTag = (name: string) => {\r\n        createTransactionTag.mutate({ name }, {\r\n            onSuccess: (data) => {\r\n                addTransactionTag.mutate({ transactionId: props.transaction.id, tagId: data.id});\r\n            }\r\n        });\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        addTransactionTag.mutate({ transactionId: props.transaction.id, tagId: tag.id });\r\n        setTags(tags.concat([tag]));\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        removeTransactionTag.mutate({ transactionId: props.transaction.id, tagId: tag.id });\r\n        setTags(tags.filter((t) => t.id !== tag.id));\r\n    }\r\n\r\n    return {\r\n        createTag,\r\n        addTag,\r\n        removeTag,\r\n        tags,\r\n    };\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\TagPanel.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTagRule.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTag.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Transaction.ts",["353"],"﻿import { TransactionTag } from \"./TransactionTag\";\r\n\r\nexport enum TransactionType {\r\n    Credit = 1,\r\n    Debit = 2,\r\n    RecurringCredit = 3,\r\n    RecurringDebit = 4,\r\n    BalanceAdjustment = 5,\r\n}\r\n\r\nexport interface Transaction {\r\n    id: string;\r\n    reference: string;\r\n    accountId: string;\r\n    amount: number;\r\n    description: string;\r\n    transactionTime: Date;\r\n    transactionType: TransactionType;\r\n    tags: TransactionTag[];\r\n    extraInfo: any;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\ImporterType.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Account.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\TransactionTagRow.tsx",["354","355"],"﻿import React, { useState, useEffect } from \"react\";\r\n\r\nimport { TransactionTag } from \"../../models\";\r\nimport { TagPanel } from \"../../components/TagPanel\";\r\nimport { ClickableIcon } from \"../../components/ClickableIcon\";\r\nimport { useAddSubTag, useCreateTag, useDeleteTag, useRemoveSubTag, useTags } from \"../../services\";\r\n\r\nexport const TransactionTagRow: React.FC<TransactionTagRowProps> = (props) => {\r\n\r\n    const transactionRow = useTransactionTagRowEvents(props);\r\n\r\n    const fullTagsListQuery = useTags();\r\n    const fullTagsList = fullTagsListQuery.data ?? [];\r\n\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => t.id !== props.tag.id && transactionRow.tags && !transactionRow.tags.some((tt) => t.id === tt.id)));\r\n    }, [transactionRow.tags, fullTagsList]);\r\n\r\n    return (\r\n        <tr>\r\n            <td>{props.tag.name}</td>\r\n            <TagPanel as=\"td\" selectedItems={transactionRow.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={transactionRow.addTag} onRemove={transactionRow.removeTag} onCreate={transactionRow.createTag} allowCreate={true} />\r\n            <td><span onClick={transactionRow.deleteTag}><ClickableIcon icon=\"trash-alt\" title=\"Delete\" /></span></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction useTransactionTagRowEvents(props: TransactionTagRowProps) {\r\n\r\n    const [tags, setTags] = useState(props.tag.tags);\r\n\r\n    const createTransactionTag = useCreateTag();\r\n    const deleteTransactionTag = useDeleteTag();\r\n    const addSubTag = useAddSubTag();\r\n    const removeSubTag = useRemoveSubTag();\r\n\r\n    useEffect(() => {\r\n        setTags(props.tag.tags);\r\n    }, [props.tag.tags]);\r\n\r\n    const createTag = (name: string) => {\r\n        createTransactionTag.mutate({ name }, {\r\n            onSuccess: (data) => {\r\n                addSubTag.mutate({ tagId: props.tag.id, subTagId: data.id});\r\n            }\r\n        });\r\n    }\r\n\r\n    const deleteTag = () => {\r\n\r\n        if (window.confirm(\"Deleting this tag will remove it from all rules and transactions. Are you sure?\")) {\r\n            deleteTransactionTag.mutate({ id: props.tag.id});\r\n        }\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        addSubTag.mutate({ tagId: props.tag.id, subTagId: tag.id });\r\n        setTags(tags.concat([tag]));\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        removeSubTag.mutate({ tagId: props.tag.id, subTagId: tag.id});\r\n        setTags(tags.filter((t) => t.id !== tag.id));\r\n    }\r\n\r\n    return {\r\n        createTag,\r\n        deleteTag,\r\n        addTag,\r\n        removeTag,\r\n        tags,\r\n    };\r\n}\r\n\r\nexport interface TransactionTagRowProps {\r\n    tag: TransactionTag;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\Upload.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\PageHeader.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\ComboBox.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\CloseBadge.tsx",["356"],"﻿import \"./CloseBadge.scss\";\r\n\r\nimport React, { PropsWithChildren } from \"react\";\r\nimport { Badge, BadgeProps } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport const CloseBadge: React.FC<PropsWithChildren<CloseBadgeProps>> = (props) => {\r\n\r\n    const click = (e:React.MouseEvent<any, any>) => {\r\n        e.defaultPrevented = true;\r\n        e.stopPropagation();\r\n\r\n        props.onClose && props.onClose();\r\n    }\r\n\r\n    let { onClick, className, ...other } = props;\r\n\r\n    className = (className + \" close-badge\").trim();\r\n\r\n    return (<Badge {...other} className={className} >{props.children}<span onClick={click}><FontAwesomeIcon icon=\"times-circle\" /></span></Badge>);\r\n}\r\n\r\nCloseBadge.displayName = \"CloseBadge\";\r\n\r\nexport interface CloseBadgeProps extends BadgeProps {\r\n    onClose?: () => void;\r\n    onClick?: () => void;\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountSummary.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountBalance.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionTagRuleService.ts",["357"],"import * as Models from \"../models\";\r\nimport { useApiGet, useApiPost, useApiPut, useApiDelete, useApiDatalessPut, useApiDatalessPost } from \"./api\";\r\nimport { useQueryClient } from \"react-query\";\r\n\r\nconst transactionRulesKey = \"transactionrules\";\r\n\r\nexport const useRules = (accountId: string) => useApiGet<Models.TransactionTagRules>([transactionRulesKey, accountId], `api/accounts/${accountId}/transaction/tag/rules`);\r\n\r\nexport const useRunRules = () => useApiDatalessPost<null, { accountId: string }>((variables) => `api/accounts/${variables.accountId}/transaction/tag/rules/run`);\r\n\r\nexport const useAddTransactionTagRuleTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useApiDatalessPut<Models.TransactionTagRule, { accountId: string, ruleId: number, tagId: number }>((variables) => `api/accounts/${variables.accountId}/transaction/tag/rules/${variables.ruleId}/tag/${variables.tagId}`, {\r\n        onSuccess: (data: Models.TransactionTagRule, variables: { accountId: string, ruleId: number, tagId: number }) => {\r\n            queryClient.setQueryData<Models.TransactionTagRule>([transactionRulesKey, variables.accountId, { id: variables.ruleId }], data);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useRemoveTransactionTagRuleTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useApiDelete<{ accountId: string, ruleId: number, tagId: number }>((variables) => `api/accounts/${variables.accountId}/transaction/tag/rules/${variables.ruleId}/tag/${variables.tagId}`, {\r\n        onSuccess: (data: Models.TransactionTagRule, variables: { accountId: string, ruleId: number, tagId: number }) => {\r\n            queryClient.setQueryData<Models.TransactionTagRule>([transactionRulesKey, variables.accountId, { id: variables.ruleId }], data);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useCreateRule = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useApiPost<Models.TransactionTagRule, { accountId: string }, Models.TransactionTagRule>((variables) => `api/accounts/${variables.accountId}/transaction/tag/rules`, {\r\n        onMutate: ([variables, data]) => {\r\n            const allRules = queryClient.getQueryData<Models.TransactionTagRules>([transactionRulesKey, variables.accountId]);\r\n            if (!allRules) {\r\n                console.warn(\"Query Cache is missing Transaction Rules\");\r\n                return;\r\n            }\r\n            allRules.rules.push(data);\r\n            allRules.rules = allRules.rules.sort((t1, t2) => t1.contains.localeCompare(t2.contains));\r\n            queryClient.setQueryData<Models.TransactionTagRules>([transactionRulesKey, variables.accountId], allRules);\r\n        },\r\n        onSuccess: () => {\r\n            //queryClient.invalidateQueries([transactionRulesKey]);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useDeleteRule = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useApiDelete<{ accountId: string; ruleId: number }>((variables) => `api/accounts/${variables.accountId}/transaction/tag/rules/${variables.ruleId}`, {\r\n        onSuccess: (variables: { accountId: string; ruleId: number }) => {\r\n            let allTags = queryClient.getQueryData<Models.TransactionTagRule[]>([transactionRulesKey]);\r\n            allTags = allTags.filter(r => r.id !== (variables.ruleId));\r\n            allTags = allTags.sort((t1, t2) => t1.contains.localeCompare(t2.contains));\r\n            queryClient.setQueryData<Models.TransactionTagRule[]>([transactionRulesKey], allTags);\r\n        }\r\n    });\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionService.ts",["358"],"import { useQueryClient } from \"react-query\";\r\n\r\nimport * as Models from \"../models\";\r\nimport { useApiGet, useApiPut, useApiDelete, useApiDatalessPut } from \"./api\";\r\n\r\nconst transactionKey = \"transactions\";\r\n\r\ninterface TransactionTagVariables {\r\n    transactionId: string,\r\n    tagId: number,\r\n}\r\n\r\nexport const useTransactions = (accountId: string, filterTagged: boolean, pageSize: number, pageNumber: number) =>\r\n    useApiGet<Models.Transactions>([transactionKey, accountId, filterTagged, pageSize, pageNumber], `api/accounts/${accountId}/transactions/${filterTagged ? \"untagged/\" : \"\"}${pageSize}/${pageNumber}`);\r\n\r\nexport const useAddTransactionTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useApiDatalessPut<Models.Transaction, TransactionTagVariables>((variables) => `api/transactions/${variables.transactionId}/tag/${variables.tagId}`, {\r\n        onSuccess: (data: Models.Transaction, variables) => {\r\n            queryClient.setQueryData<Models.Transaction>([transactionKey, { id: variables.transactionId }], data);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useRemoveTransactionTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useApiDelete<TransactionTagVariables>((variables) => `api/transactions/${variables.transactionId}/tag/${variables.tagId}`, {\r\n        onSuccess: (_data: null, variables) => {\r\n            const transaction = queryClient.getQueryData<Models.Transaction>([transactionKey, { id: variables.transactionId }]);\r\n            transaction.tags = transaction.tags.filter(t => t.id !== variables.tagId);\r\n            queryClient.setQueryData<Models.Transaction>([transactionKey, { id: variables.transactionId }], transaction);\r\n        }\r\n    });\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionTagService.ts",["359"],"import * as Models from \"../models\";\r\nimport { useApiGet, useApiPut, useApiDelete, useApiDatalessPut } from \"./api\";\r\nimport { useMutation, useQueryClient } from \"react-query\";\r\nimport { useHttpClient } from \"../components\";\r\n\r\ninterface TransactionTagVariables {\r\n    name: string;\r\n}\r\n\r\nexport const useTags = () => useApiGet<Models.TransactionTag[]>([\"tags\"], `api/transaction/tags`);\r\n\r\nexport const useCreateTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n    const httpClient = useHttpClient();\r\n\r\n    return useMutation<Models.TransactionTag, null, TransactionTagVariables | Models.TransactionTag>(async (variables) => {\r\n\r\n        const name = (variables as Models.TransactionTag).name || (variables.name).trim();\r\n        const tags = (variables as Models.TransactionTag).tags || [];\r\n\r\n        return (await httpClient.put<Models.TransactionTag>(`api/transaction/tags/${encodeURIComponent(name)}`, tags)).data;\r\n    }, {\r\n        onSuccess: (data: Models.TransactionTag) => {\r\n            queryClient.setQueryData<Models.TransactionTag>([\"tags\", { id: data.id }], data);\r\n            let allTags = queryClient.getQueryData<Models.TransactionTag[]>([\"tags\"]);\r\n            allTags = allTags.sort((t1, t2) => t1.name.localeCompare(t2.name));\r\n            queryClient.setQueryData<Models.TransactionTag[]>([\"tags\"], allTags);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useDeleteTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useApiDelete<{ id: number }>((variables) => `api/transaction/tags/${variables.id}`, {\r\n        onSuccess: (variables: { id: number }) => {\r\n            let allTags = queryClient.getQueryData<Models.TransactionTag[]>([\"tags\"]);\r\n            allTags = allTags.filter(r => r.id !== (variables.id));\r\n            allTags = allTags.sort((t1, t2) => t1.name.localeCompare(t2.name));\r\n            queryClient.setQueryData<Models.TransactionTag[]>([\"tags\"], allTags);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useAddSubTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useApiDatalessPut<Models.TransactionTag, { tagId: number, subTagId: number }>((variables) => `api/transaction/tags/${variables.tagId}/tags/${variables.subTagId}`, {\r\n        onSuccess: (data: Models.TransactionTag, variables) => {\r\n            queryClient.setQueryData<Models.TransactionTag>([\"tags\", { id: variables.tagId }], data);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useRemoveSubTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useApiDelete<{ tagId: number, subTagId: number }>((variables) => `api/transaction/tags/${variables.tagId}/tags/${variables.subTagId}`, {\r\n        onSuccess: (data: null, variables) => {\r\n            const tag = queryClient.getQueryData<Models.TransactionTag>([\"tags\", { id: variables.tagId }]);\r\n            tag.tags =tag.tags.filter(t => t.id !== variables.subTagId);\r\n        }\r\n    });\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ReferenceDataService.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ImportService.ts",["360","361"],"import * as Models from \"../models\";\r\nimport { ServiceBase } from \"./ServiceBase\";\r\nimport HttpClient from \"./HttpClient\";\r\nimport { useApiPostFile } from \"./api\";\r\n\r\nexport const useImportTransactions = () => useApiPostFile<{accountId: string, file: File}>((variables) => `api/accounts/${variables.accountId}/import`);\r\n\r\nexport class ImportService extends ServiceBase {\r\n\r\n/*    public async importTransactions(accountId: string, file: File): Promise<void> {\r\n        const url = `api/accounts/${accountId}/import`;\r\n\r\n        const client = new HttpClient(this.state.app.baseUrl);\r\n\r\n        try {\r\n            await client.postFile(url, file);\r\n        }\r\n        catch (response) {\r\n            super.handleError(response as Response);\r\n        }\r\n    }*/\r\n\r\n/*    public async addTransactionTag(transactionId: string, tagId: number): Promise<Models.Transaction> {\r\n        const url = `api/transactions/${transactionId}/tag/${tagId}`;\r\n\r\n        const client = new HttpClient(this.state.app.baseUrl);\r\n\r\n        try {\r\n            return await client.put(url);\r\n        }\r\n        catch (response) {\r\n            super.handleError(response as Response);\r\n        }\r\n    }\r\n\r\n    public async removeTransactionTag(transactionId: string, tagId: number) {\r\n        const url = `api/transactions/${transactionId}/tag/${tagId}`;\r\n\r\n        const client = new HttpClient(this.state.app.baseUrl);\r\n\r\n        try {\r\n            return await client.delete(url);\r\n        }\r\n        catch (response) {\r\n            super.handleError(response as Response);\r\n        }\r\n    }*/\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\AccountList.tsx",["362"],"import \"./AccountList.scss\";\r\n\r\nimport React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport { AccountRow } from \"./AccountRow\";\r\n//import VirtualAccountRow from \"./VirtualAccountRow\";\r\nimport { getBalanceString } from \"../../helpers\";\r\nimport { useAccounts } from \"../../services\";\r\n\r\nexport const AccountList: React.FC<AccountListProps> = () => {\r\n\r\n    const accountsQuery = useAccounts();\r\n\r\n    const { data } = accountsQuery;\r\n\r\n    const virtualAccountRows = [];\r\n\r\n/*    if (virtualAccounts) {\r\n        for (const account of virtualAccounts) {\r\n            virtualAccountRows.push(<VirtualAccountRow key={account.virtualAccountId} account={account} />);\r\n        }\r\n    }*/\r\n\r\n    const accountRows = [];\r\n    if (data?.accounts) {\r\n        for (const account of data?.accounts) {\r\n            accountRows.push(<AccountRow key={account.id} account={account} />);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"account-list\">\r\n                <h2>Accounts</h2>\r\n\r\n                <Table className=\"accounts\" hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Current Balance</th>\r\n                            {/*<th>Available Balance</th>*/}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {accountRows}\r\n                    </tbody>\r\n                    <tfoot>\r\n                        <tr>\r\n                            <td>Position</td>\r\n                            <td>{getBalanceString(data?.position)}</td>\r\n                        </tr>\r\n                    </tfoot>\r\n                </Table>\r\n            </section>\r\n           {/* <section className=\"account-list\">\r\n                <h2>Virtual Accounts</h2>\r\n\r\n                <Table id=\"virtualAccounts\" className=\"accounts\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Balance</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {virtualAccountRows}\r\n                    </tbody>\r\n                </Table>\r\n    </section>*/}\r\n        </>\r\n    );\r\n}\r\n\r\nAccountList.displayName = \"AccountList\";\r\n\r\nexport interface AccountListProps {\r\n\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\HttpClient.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ServiceBase.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\Alert.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\VirtualAccountRow.tsx",["363"],"﻿import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { VirtualAccount } from \"../../store/state\";\r\n\r\nclass VirtualAccountRow extends Component<VirtualAccountRowProps, any> {\r\n\r\n    public render() {\r\n        return (\r\n            <tr>\r\n                <td className=\"account\">\r\n                    <div className=\"name\">{this.props.account.name}</div>\r\n                    <div className=\"description\">{this.props.account.description}</div>\r\n                    <nav className=\"desktop\">\r\n                        <ul>\r\n                            <li>\r\n                                <a href={\"/transactions/transfer/\" + this.props.account.virtualAccountId}>Transfer funds</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href={\"/transactions/history/\" + this.props.account.virtualAccountId}>Transactions</a>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>e\r\n                </td>\r\n                <td>{this.props.account.balance.toFixed(2) + \" \" + (this.props.account.balance < 0 ? \"D\" : \"C\") + \"R\"}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()(VirtualAccountRow);\r\n\r\ninterface VirtualAccountRowProps {\r\n    account: VirtualAccount;\r\n}\r\n",["364","365"],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\AccountRow.tsx",["366","367"],"﻿import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport * as Models from \"../../models\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AccountController } from \"../../models\";\r\n\r\nimport { ManualAccountRow} from \"./ManualAccountRow\";\r\n\r\nexport const AccountRow: React.FC<AccountRowProps> = (props) => {\r\n\r\nconst { onRowClick } = useAccountRowCommonState(props);\r\n\r\n    switch (props.account.controller) {\r\n        case AccountController.Manual:\r\n            return <ManualAccountRow {...props} />\r\n        case AccountController.Import:\r\n    }\r\n\r\n    return (\r\n        <tr onClick={onRowClick} className=\"clickable\">\r\n            <td className=\"account\">\r\n                <div className=\"name\">{props.account.name}</div>\r\n            </td>\r\n            <td><span className={props.account.currentBalance < 0 ? \" negative\" : \"\"}>{props.account.currentBalance + (props.account.currentBalance < 0 ? \"D\" : \"C\") + \"R\"}</span></td>\r\n{/*}            <td><span className={props.account.availableBalance < 0 ? \" negative\" : \"\"}>{props.account.availableBalance + (props.account.availableBalance < 0 ? \"D\" : \"C\") + \"R\"}</span></td>*/}\r\n        </tr>\r\n    );\r\n}\r\n\r\nAccountRow.displayName = \"AccountRow\";\r\n\r\nexport interface AccountRowProps {\r\n    account: Models.Account;\r\n}\r\n\r\nexport const useAccountRowCommonState = (props: AccountRowProps) => {\r\n\r\n    var history = useHistory();\r\n\r\n    const onRowClick = () => {\r\n        history.push(`accounts/${props.account.id}`);\r\n    };\r\n\r\n    return {\r\n        onRowClick,\r\n    };\r\n}\r\n\r\n/*const useRenderers = (props: AccountRowProps) => {\r\n\r\n    const renderManual = () => {\r\n\r\n    }\r\n\r\n    const renderImport = () => {\r\n\r\n    }\r\n\r\n    const getRenderer: Function = () => {\r\n        switch (props.account.controller) {\r\n            case AccountController.Manual:\r\n                return renderManual;\r\n                case AccountController.Import:\r\n                    return renderImport;\r\n\r\n        }\r\n\r\n        return {\r\n            useRenderers,\r\n        };\r\n\r\n    }\r\n}*/","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\ManualAccountRow.tsx",["368","369","370","371","372","373"],"﻿import React, { useState, useRef } from \"react\";\r\nimport { getBalanceString } from \"../../helpers\";\r\n\r\nimport { AccountRowProps, useAccountRowCommonState } from \"./AccountRow\";\r\nimport { useClickAway } from \"../../hooks\";\r\n\r\nexport const ManualAccountRow: React.FC<AccountRowProps> = (props) => {\r\n\r\n    const { balanceRef, avBalanceRef, editingBalance, editingAvBalance, balanceClick, avBalanceClick, balanceChange, avBalanceChange, balance, avBalance } = useComponentState(props);\r\n    const { onRowClick } = useAccountRowCommonState(props);\r\n\r\n    return (\r\n        <tr onClick={onRowClick} className=\"clickable\">\r\n            <td className=\"account\">\r\n                <div className=\"name\">{props.account.name}</div>\r\n            </td>\r\n            <td onClick={balanceClick} ref={balanceRef}> {!editingBalance && <span className={props.account.currentBalance < 0 ? \" negative\" : \"\"}>{getBalanceString(balance)}</span>}\r\n                {editingBalance && <input type=\"number\" value={balance} onChange={balanceChange} />}\r\n            </td>\r\n            {/*<td onClick={avBalanceClick} ref={avBalanceRef}> {!editingAvBalance && <span className={props.account.availableBalance < 0 ? \" negative\" : \"\"}>{getBalanceString(avBalance)}</span>}\r\n                {editingAvBalance && <input type=\"number\" value={avBalance} onChange={avBalanceChange} />}\r\n            </td>*/}\r\n        </tr>\r\n    );\r\n}\r\n\r\nManualAccountRow.displayName = \"ManualAccountRow\";\r\n\r\nconst useComponentState = (props: AccountRowProps) => {\r\n\r\n    //const dispatch = useDispatch();\r\n    //const history = useHistory();\r\n\r\n    const [editingBalance, setEditingBalance] = useState(false);\r\n    const [editingAvBalance, setEditingAvBalance] = useState(false);\r\n\r\n    const [balance, setBalance] = useState(props.account.currentBalance);\r\n    const [avBalance, setAvBalance] = useState(props.account.availableBalance);\r\n\r\n    const balanceRef = useRef(null);\r\n    useClickAway(setEditingBalance, balanceRef);\r\n\r\n    const avBalanceRef = useRef(null);\r\n    useClickAway(setEditingAvBalance, avBalanceRef);\r\n\r\n    const balanceClick = (e: React.MouseEvent<HTMLTableDataCellElement>) => {\r\n        setEditingBalance(true);\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const avBalanceClick = (e: React.MouseEvent<HTMLTableDataCellElement>) => {\r\n        setEditingAvBalance(true);\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const balanceChange =(e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setBalance(parseFloat(e.currentTarget.value));\r\n    }\r\n\r\n    const avBalanceChange =(e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setAvBalance(parseFloat(e.currentTarget.value));\r\n    }\r\n\r\n    return {\r\n        balanceRef,\r\n        avBalanceRef,\r\n\r\n        editingBalance,\r\n        editingAvBalance,\r\n\r\n        balanceClick,\r\n        avBalanceClick,\r\n\r\n        balanceChange,\r\n        avBalanceChange,\r\n\r\n        balance,\r\n        avBalance,\r\n    };\r\n}\r\n\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\clickAway.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\pageTitle.ts",["374"],"import { useEffect } from \"react\";\r\nimport { useApp } from \"../components\";\r\n\r\nexport function usePageTitle(title: string) {\r\n\r\n    const { appName } = useApp();\r\n\r\n    useEffect(() => {\r\n        document.title = `${title} : ${appName}`;\r\n    }, [title]);\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\helpers\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\helpers\\renderingHelpers.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\configureStore.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Layout.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Footer.tsx",["375"],"﻿import React from \"react\";\r\n\r\nexport const Footer = () => (\r\n    <footer>\r\n        Copyright &copy; Andrew McLachlan 2013. All rights reserved.<br />\r\n        <a href=\"http://www.andrewmclachlan.com\">www.andrewmclachlan.com</a>\r\n    </footer>\r\n);\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Header.tsx",["376","377","378"],"﻿import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useApp, useMsal } from \"../components\";\r\n\r\nexport const Header: React.FC<HeaderProps> = (props) => {\r\n\r\n    const appState = useApp();\r\n\r\n    const { loading, isAuthenticated, login, logout } = useMsal();\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"container\">\r\n                <Link to=\"/\"><img src={appState.baseUrl + \"images/\" + appState.skin + \"/moo@2x.png\"} alt={appState.appName} className=\"desktop\" width=\"76\" height=\"111\" /><img src={appState.baseUrl + \"images/\" + appState.skin + \"/moo-small@2x.png\"} alt={appState.appName} className=\"img mobile\" width=\"99\" height=\"32\" /></Link>\r\n            </div>\r\n            <nav>\r\n                <ul>\r\n                    { !isAuthenticated && <li><a onClick={() => login(\"loginRedirect\")}>Login</a></li> }\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li className=\"desktop\"><Link to=\"/accounts\">Manage Accounts</Link></li>\r\n                    <li className=\"desktop\"><Link to=\"/settings\">Settings</Link></li>\r\n                    {isAuthenticated && <li><button onClick={() => logout() }>Logout</button></li>}\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\ninterface HeaderProps {\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AppProvider.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Accounts.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\AccountService.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Transactions.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTagRules.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\HttpClientProvider.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\useApiGet.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\useApiPost.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\MsalProvider.tsx",["379"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport * as msal from \"@azure/msal-browser\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        getToken: (request: any, method: LoginMethod) => Promise<string>,\r\n        token: string,\r\n    }\r\n}\r\n\r\nconst ua = window.navigator.userAgent;\r\nconst msie = ua.indexOf(\"MSIE \");\r\nconst msie11 = ua.indexOf(\"Trident/\");\r\nconst msedge = ua.indexOf(\"Edge/\");\r\nconst isIE = msie > 0 || msie11 > 0;\r\nconst isEdge = msedge > 0;\r\n\r\nexport type LoginMethod = \"loginRedirect\" | \"loginPopup\";\r\n\r\nexport interface MsalContextValues {\r\n    isAuthenticated: boolean,\r\n    user: msal.AccountInfo,\r\n    token: string,\r\n    loading: boolean,\r\n    popupOpen: boolean,\r\n    loginError: any,\r\n    login: (method: \"loginRedirect\" | \"loginPopup\") => Promise<void>,\r\n    logout: () => void,\r\n    getToken: (request: any, method: LoginMethod) => Promise<string>,\r\n}\r\n  \r\nexport const msalConfig = {\r\n    auth: {\r\n        clientId: \"045f8afa-70f2-4700-ab75-77ac41b306f7\",\r\n        authority: \"https://login.microsoftonline.com/30efefb9-9034-4e0c-8c69-17f4578f5924\",\r\n    },\r\n    cache: {\r\n        cacheLocation: \"localStorage\", // This configures where your cache will be stored\r\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\r\n    }\r\n};\r\n\r\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\r\nexport const loginRequest = {\r\n    scopes: [\"openid\", \"profile\", \"User.Read\"],\r\n    forceRefresh: false // Set this to \"true\" to skip a cached token and go to the server to get a new token\r\n};\r\n\r\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\r\nexport const apiRequest = {\r\n    scopes: [\"api://bankplus.mclachlan.family/api.read\"],\r\n    forceRefresh: false // Set this to \"true\" to skip a cached token and go to the server to get a new token\r\n};\r\n\r\nexport interface MsalProviderProps {\r\n    children: any,\r\n    config: msal.Configuration,\r\n}\r\n\r\nexport const MsalContext = React.createContext<MsalContextValues | undefined>(undefined);\r\nexport const MsalProvider = ({\r\n    children,\r\n    config,\r\n}:MsalProviderProps) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState<boolean>();\r\n    const [user, setUser] = useState<msal.AccountInfo>();\r\n    const [token, setToken] = useState<string>();\r\n    const [publicClient, setPublicClient] = useState<msal.PublicClientApplication>();\r\n    const [loading, setLoading] = useState(false);\r\n    const [popupOpen, setPopupOpen] = useState(false);\r\n    const [loginError, setLoginError] = useState(false);\r\n\r\n    const getAccount = (pc: msal.PublicClientApplication): msal.AccountInfo => {\r\n        // need to call getAccount here?\r\n        const currentAccounts = pc.getAllAccounts();\r\n        if (currentAccounts === null) {\r\n            console.log(\"No accounts detected\");\r\n            return null;\r\n        }\r\n\r\n        if (currentAccounts.length > 1) {\r\n            // Add choose account code here\r\n            console.log(\"Multiple accounts detected, need to add choose account code.\");\r\n            return currentAccounts[0];\r\n        } else if (currentAccounts.length === 1) {\r\n            return currentAccounts[0];\r\n        }\r\n    }\r\n\r\n    \r\n    if (!publicClient) {\r\n        const pc: msal.PublicClientApplication = new msal.PublicClientApplication(config);\r\n\r\n        pc.handleRedirectPromise().then((response) => \r\n        {\r\n            setLoading(false);\r\n            if (response) {\r\n                setUser(getAccount(pc));\r\n                setIsAuthenticated(true);\r\n                if(response.accessToken) {\r\n                  setToken(response.accessToken);\r\n                }\r\n            } \r\n        }).catch(error => {\r\n            console.log(error);\r\n            setLoginError(error);\r\n        });\r\n\r\n        if (getAccount(pc)) {\r\n            setUser(getAccount(pc));\r\n            setIsAuthenticated(true);\r\n        }\r\n        \r\n        setPublicClient(pc);\r\n    }\r\n\r\n    const login = async (method: LoginMethod) => {\r\n        const signInType = (isIE || isEdge) ? \"loginRedirect\" : method;\r\n        if (signInType === \"loginPopup\") {\r\n            setPopupOpen(true);\r\n\r\n            try {\r\n                await publicClient.loginPopup(loginRequest);\r\n\r\n                if (getAccount(publicClient)) {\r\n                    setUser(getAccount(publicClient));\r\n                    setIsAuthenticated(true);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                setLoginError(error);\r\n            } finally {\r\n                setPopupOpen(false);\r\n            }\r\n        } else if (signInType === \"loginRedirect\") {\r\n            setLoading(true);\r\n\r\n            publicClient.loginRedirect(loginRequest)\r\n        }\r\n    }\r\n\r\n    const logout = () => {\r\n        publicClient.logout();\r\n    }\r\n\r\n    const getTokenPopup = async (request: any) => {\r\n        try {\r\n            request.account = user;\r\n            if (!request.account || request.account === null) return \"No Account\";\r\n\r\n            var token = (await publicClient.acquireTokenSilent(request)).accessToken;\r\n            setToken(token);\r\n            return token;\r\n        } catch (error) {\r\n            try {\r\n                setPopupOpen(true);\r\n                \r\n                const response = await publicClient.acquireTokenPopup(request);\r\n                setToken(response.accessToken);\r\n                return response.accessToken;\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n                setLoginError(error);\r\n            }\r\n            finally {\r\n                setPopupOpen(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const getTokenRedirect = async (request: msal.SilentRequest): Promise<string> => {\r\n        try {\r\n            request.account = user;\r\n            if (!request.account || request.account === null) return \"No Account\";\r\n\r\n            var token = (await publicClient.acquireTokenSilent(request)).accessToken;\r\n            setToken(token);\r\n            return token;\r\n        }\r\n        catch(error) {\r\n               \r\n            try{\r\n                setLoading(true);\r\n                publicClient.acquireTokenRedirect(request);\r\n            }\r\n            catch(error) { \r\n                console.log(error);\r\n                setLoginError(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    const getToken = async (request: any, method: LoginMethod): Promise<string> => {\r\n        const signInType = (isIE || isEdge)? \"loginRedirect\" : method;\r\n        if(signInType === \"loginRedirect\") {\r\n            return await getTokenRedirect(request);\r\n        } else\r\n        {\r\n            return await getTokenPopup(request);\r\n        }\r\n    }\r\n\r\n    window.getToken = getToken;\r\n\r\n    return (\r\n        <MsalContext.Provider\r\n            value={{\r\n                isAuthenticated,\r\n                user,\r\n                token,\r\n                loading,\r\n                popupOpen,\r\n                loginError,\r\n                login,\r\n                logout,\r\n                getToken\r\n            }}\r\n        >\r\n            {children}\r\n        </MsalContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useMsal = () => useContext(MsalContext);\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\VirtualAccount.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\api.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\useApiPut.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\useApiPatch.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\useApiDelete.ts",[],{"ruleId":"380","replacedBy":"381"},{"ruleId":"382","replacedBy":"383"},{"ruleId":"384","severity":1,"message":"385","line":6,"column":10,"nodeType":"386","messageId":"387","endLine":6,"endColumn":15},{"ruleId":"384","severity":1,"message":"388","line":11,"column":10,"nodeType":"386","messageId":"387","endLine":11,"endColumn":29},{"ruleId":"384","severity":1,"message":"389","line":16,"column":71,"nodeType":"386","messageId":"387","endLine":16,"endColumn":86},{"ruleId":"384","severity":1,"message":"390","line":67,"column":12,"nodeType":"386","messageId":"387","endLine":67,"endColumn":20},{"ruleId":"391","severity":1,"message":"392","line":75,"column":8,"nodeType":"393","endLine":75,"endColumn":41,"suggestions":"394"},{"ruleId":"384","severity":1,"message":"395","line":3,"column":10,"nodeType":"386","messageId":"387","endLine":3,"endColumn":21},{"ruleId":"384","severity":1,"message":"385","line":4,"column":10,"nodeType":"386","messageId":"387","endLine":4,"endColumn":15},{"ruleId":"384","severity":1,"message":"396","line":3,"column":17,"nodeType":"386","messageId":"387","endLine":3,"endColumn":26},{"ruleId":"384","severity":1,"message":"397","line":5,"column":10,"nodeType":"386","messageId":"387","endLine":5,"endColumn":28},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"402"},{"ruleId":"391","severity":1,"message":"403","line":14,"column":11,"nodeType":"404","endLine":14,"endColumn":54},{"ruleId":"391","severity":1,"message":"405","line":48,"column":11,"nodeType":"404","endLine":48,"endColumn":54},{"ruleId":"384","severity":1,"message":"406","line":52,"column":11,"nodeType":"386","messageId":"387","endLine":52,"endColumn":20},{"ruleId":"384","severity":1,"message":"407","line":53,"column":11,"nodeType":"386","messageId":"387","endLine":53,"endColumn":23},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"408"},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"409"},{"ruleId":"384","severity":1,"message":"410","line":1,"column":10,"nodeType":"386","messageId":"387","endLine":1,"endColumn":18},{"ruleId":"384","severity":1,"message":"385","line":4,"column":24,"nodeType":"386","messageId":"387","endLine":4,"endColumn":29},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"411"},{"ruleId":"384","severity":1,"message":"397","line":5,"column":10,"nodeType":"386","messageId":"387","endLine":5,"endColumn":28},{"ruleId":"391","severity":1,"message":"412","line":15,"column":11,"nodeType":"404","endLine":15,"endColumn":54},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"413"},{"ruleId":"384","severity":1,"message":"414","line":4,"column":10,"nodeType":"386","messageId":"387","endLine":4,"endColumn":21},{"ruleId":"391","severity":1,"message":"403","line":14,"column":11,"nodeType":"404","endLine":14,"endColumn":54},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"415"},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"416"},{"ruleId":"391","severity":1,"message":"417","line":19,"column":8,"nodeType":"393","endLine":19,"endColumn":43,"suggestions":"418"},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"419"},{"ruleId":"384","severity":1,"message":"420","line":2,"column":33,"nodeType":"386","messageId":"387","endLine":2,"endColumn":42},{"ruleId":"384","severity":1,"message":"420","line":4,"column":21,"nodeType":"386","messageId":"387","endLine":4,"endColumn":30},{"ruleId":"384","severity":1,"message":"420","line":2,"column":21,"nodeType":"386","messageId":"387","endLine":2,"endColumn":30},{"ruleId":"384","severity":1,"message":"421","line":1,"column":13,"nodeType":"386","messageId":"387","endLine":1,"endColumn":19},{"ruleId":"384","severity":1,"message":"422","line":3,"column":8,"nodeType":"386","messageId":"387","endLine":3,"endColumn":18},{"ruleId":"384","severity":1,"message":"423","line":17,"column":11,"nodeType":"386","messageId":"387","endLine":17,"endColumn":29},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"424"},{"ruleId":"380","replacedBy":"425"},{"ruleId":"382","replacedBy":"426"},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"427"},{"ruleId":"384","severity":1,"message":"428","line":5,"column":10,"nodeType":"386","messageId":"387","endLine":5,"endColumn":21},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"429"},{"ruleId":"384","severity":1,"message":"430","line":9,"column":25,"nodeType":"386","messageId":"387","endLine":9,"endColumn":37},{"ruleId":"384","severity":1,"message":"431","line":9,"column":55,"nodeType":"386","messageId":"387","endLine":9,"endColumn":71},{"ruleId":"384","severity":1,"message":"432","line":9,"column":87,"nodeType":"386","messageId":"387","endLine":9,"endColumn":101},{"ruleId":"384","severity":1,"message":"433","line":9,"column":118,"nodeType":"386","messageId":"387","endLine":9,"endColumn":133},{"ruleId":"384","severity":1,"message":"434","line":9,"column":144,"nodeType":"386","messageId":"387","endLine":9,"endColumn":153},{"ruleId":"391","severity":1,"message":"435","line":10,"column":8,"nodeType":"393","endLine":10,"endColumn":15,"suggestions":"436"},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"437"},{"ruleId":"398","severity":1,"message":"399","line":1,"column":1,"nodeType":"400","messageId":"401","fix":"438"},{"ruleId":"384","severity":1,"message":"439","line":10,"column":13,"nodeType":"386","messageId":"387","endLine":10,"endColumn":20},{"ruleId":"440","severity":1,"message":"441","line":19,"column":47,"nodeType":"442","endLine":19,"endColumn":89},{"ruleId":"384","severity":1,"message":"396","line":1,"column":27,"nodeType":"386","messageId":"387","endLine":1,"endColumn":36},"no-native-reassign",["443"],"no-negated-in-lhs",["444"],"@typescript-eslint/no-unused-vars","'State' is defined but never used.","Identifier","unusedVar","'RouteComponentProps' is defined but never used.","'useTransactions' is defined but never used.","'tagsList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fullTagsList'. Either include it or remove the dependency array.","ArrayExpression",["445"],"'useSelector' is defined but never used.","'useEffect' is defined but never used.","'bindActionCreators' is defined but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"446","text":"447"},"The 'fullTagsList' logical expression could make the dependencies of useEffect Hook (at line 20) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'fullTagsList' in its own useMemo() Hook.","VariableDeclarator","The 'fullTagsList' logical expression could make the dependencies of useEffect Hook (at line 61) change on every render. To fix this, wrap the initialization of 'fullTagsList' in its own useMemo() Hook.","'addSubTag' is assigned a value but never used.","'removeSubTag' is assigned a value but never used.",{"range":"448","text":"447"},{"range":"449","text":"447"},"'Dispatch' is defined but never used.",{"range":"450","text":"447"},"The 'fullTagsList' logical expression could make the dependencies of useEffect Hook (at line 21) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'fullTagsList' in its own useMemo() Hook.",{"range":"451","text":"447"},"'Transaction' is defined but never used.",{"range":"452","text":"447"},{"range":"453","text":"447"},"React Hook useEffect has a missing dependency: 'props.tag.id'. Either include it or remove the dependency array. If 'setTagsList' needs the current value of 'props.tag.id', you can also switch to useReducer instead of useState and read 'props.tag.id' in the reducer.",["454"],{"range":"455","text":"447"},"'useApiPut' is defined but never used.","'Models' is defined but never used.","'HttpClient' is defined but never used.","'virtualAccountRows' is assigned a value but never used.",{"range":"456","text":"447"},["443"],["444"],{"range":"457","text":"447"},"'useDispatch' is defined but never used.",{"range":"458","text":"447"},"'avBalanceRef' is assigned a value but never used.","'editingAvBalance' is assigned a value but never used.","'avBalanceClick' is assigned a value but never used.","'avBalanceChange' is assigned a value but never used.","'avBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'appName'. Either include it or remove the dependency array.",["459"],{"range":"460","text":"447"},{"range":"461","text":"447"},"'loading' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"462","fix":"463"},[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],{"desc":"464","fix":"465"},[-1,0],[-1,0],[-1,0],[-1,0],{"desc":"466","fix":"467"},[-1,0],[-1,0],"Update the dependencies array to be: [newRule.tags, fullTagsListQuery, fullTagsList]",{"range":"468","text":"469"},"Update the dependencies array to be: [transactionRow.tags, fullTagsList, props.tag.id]",{"range":"470","text":"471"},"Update the dependencies array to be: [appName, title]",{"range":"472","text":"473"},[3056,3089],"[newRule.tags, fullTagsListQuery, fullTagsList]",[807,842],"[transactionRow.tags, fullTagsList, props.tag.id]",[246,253],"[appName, title]"]