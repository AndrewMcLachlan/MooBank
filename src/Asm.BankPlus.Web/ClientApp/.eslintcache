[{"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\index.tsx":"1","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\serviceWorker.ts":"2","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\App.tsx":"3","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\index.ts":"4","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\ManageAccounts.tsx":"5","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\Import.tsx":"6","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\createAccount\\CreateAccount.tsx":"7","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\Home\\Home.tsx":"8","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\Transactions.tsx":"9","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTagRules\\TransactionTagRules.tsx":"10","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\settings\\index.ts":"11","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\index.ts":"12","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\extensions.ts":"13","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\createAccount\\ImportSettings.tsx":"14","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionList.tsx":"15","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTagRules\\TransactionTagRuleRow.tsx":"16","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\ClickableIcon.tsx":"17","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\settings\\Settings.tsx":"18","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\TransactionTags.tsx":"19","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\index.ts":"20","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\index.ts":"21","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\App.ts":"22","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Accounts.ts":"23","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Transactions.ts":"24","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionRow.tsx":"25","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionRowIng.tsx":"26","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\TagPanel.tsx":"27","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTagRule.ts":"28","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTag.ts":"29","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Transaction.ts":"30","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\ImporterType.ts":"31","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Account.ts":"32","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\index.ts":"33","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\TransactionTagRow.tsx":"34","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\Upload.tsx":"35","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\PageHeader.tsx":"36","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\ComboBox.tsx":"37","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\CloseBadge.tsx":"38","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\index.ts":"39","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountSummary.tsx":"40","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountBalance.tsx":"41","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionTagRuleService.ts":"42","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionService.ts":"43","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionTagService.ts":"44","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ReferenceDataService.ts":"45","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ImportService.ts":"46","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\AccountList.tsx":"47","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\HttpClient.ts":"48","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ServiceBase.ts":"49","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\Alert.tsx":"50","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\VirtualAccountRow.tsx":"51","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\AccountRow.tsx":"52","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\ManualAccountRow.tsx":"53","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\index.ts":"54","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\clickAway.ts":"55","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\pageTitle.ts":"56","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\helpers\\index.ts":"57","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\helpers\\renderingHelpers.ts":"58","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\configureStore.ts":"59","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Layout.tsx":"60","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Security.ts":"61","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Footer.tsx":"62","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Header.tsx":"63","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\MSALContext.tsx":"64","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AppProvider.tsx":"65","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Accounts.ts":"66","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\AccountService.ts":"67","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\useApiQuery.ts":"68","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Transactions.ts":"69","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTagRules.ts":"70"},{"size":847,"mtime":1608514617716,"results":"71","hashOfConfig":"72"},{"size":5222,"mtime":1566246575692,"results":"73","hashOfConfig":"72"},{"size":3272,"mtime":1608548630837,"results":"74","hashOfConfig":"72"},{"size":309,"mtime":1572091479221,"results":"75","hashOfConfig":"72"},{"size":64,"mtime":1566418604182,"results":"76","hashOfConfig":"72"},{"size":1022,"mtime":1608514455931,"results":"77","hashOfConfig":"72"},{"size":4820,"mtime":1608435015644,"results":"78","hashOfConfig":"72"},{"size":236,"mtime":1608435009959,"results":"79","hashOfConfig":"72"},{"size":764,"mtime":1608514081447,"results":"80","hashOfConfig":"72"},{"size":4371,"mtime":1608549126170,"results":"81","hashOfConfig":"72"},{"size":29,"mtime":1572091400242,"results":"82","hashOfConfig":"72"},{"size":36,"mtime":1572091445404,"results":"83","hashOfConfig":"72"},{"size":393,"mtime":1572070018897,"results":"84","hashOfConfig":"72"},{"size":1201,"mtime":1608532213150,"results":"85","hashOfConfig":"72"},{"size":3572,"mtime":1608532048037,"results":"86","hashOfConfig":"72"},{"size":3080,"mtime":1608547652326,"results":"87","hashOfConfig":"72"},{"size":450,"mtime":1571521196288,"results":"88","hashOfConfig":"72"},{"size":221,"mtime":1572090131652,"results":"89","hashOfConfig":"72"},{"size":3187,"mtime":1608548560952,"results":"90","hashOfConfig":"72"},{"size":345,"mtime":1608509312365,"results":"91","hashOfConfig":"72"},{"size":267,"mtime":1608548445884,"results":"92","hashOfConfig":"72"},{"size":790,"mtime":1608511890840,"results":"93","hashOfConfig":"72"},{"size":2399,"mtime":1608514250232,"results":"94","hashOfConfig":"72"},{"size":886,"mtime":1608548205445,"results":"95","hashOfConfig":"72"},{"size":2733,"mtime":1608548282097,"results":"96","hashOfConfig":"72"},{"size":2672,"mtime":1608548294492,"results":"97","hashOfConfig":"72"},{"size":1993,"mtime":1608434937225,"results":"98","hashOfConfig":"72"},{"size":148,"mtime":1571141301134,"results":"99","hashOfConfig":"72"},{"size":834,"mtime":1572005278681,"results":"100","hashOfConfig":"72"},{"size":467,"mtime":1573039633530,"results":"101","hashOfConfig":"72"},{"size":70,"mtime":1572046962945,"results":"102","hashOfConfig":"72"},{"size":585,"mtime":1572179394907,"results":"103","hashOfConfig":"72"},{"size":235,"mtime":1608514611820,"results":"104","hashOfConfig":"72"},{"size":2768,"mtime":1608548145161,"results":"105","hashOfConfig":"72"},{"size":3348,"mtime":1572679728688,"results":"106","hashOfConfig":"72"},{"size":1334,"mtime":1608512786269,"results":"107","hashOfConfig":"72"},{"size":3849,"mtime":1579422082686,"results":"108","hashOfConfig":"72"},{"size":888,"mtime":1608423660494,"results":"109","hashOfConfig":"72"},{"size":30,"mtime":1571572220006,"results":"110","hashOfConfig":"72"},{"size":1649,"mtime":1608435148104,"results":"111","hashOfConfig":"72"},{"size":369,"mtime":1570912965506,"results":"112","hashOfConfig":"72"},{"size":4888,"mtime":1608548455218,"results":"113","hashOfConfig":"72"},{"size":1726,"mtime":1608548459846,"results":"114","hashOfConfig":"72"},{"size":3084,"mtime":1608548168036,"results":"115","hashOfConfig":"72"},{"size":206,"mtime":1608531048879,"results":"116","hashOfConfig":"72"},{"size":1369,"mtime":1608510994938,"results":"117","hashOfConfig":"72"},{"size":2372,"mtime":1608514334192,"results":"118","hashOfConfig":"72"},{"size":5674,"mtime":1608514604996,"results":"119","hashOfConfig":"72"},{"size":1043,"mtime":1608512114108,"results":"120","hashOfConfig":"72"},{"size":437,"mtime":1570884624749,"results":"121","hashOfConfig":"72"},{"size":1316,"mtime":1608465922472,"results":"122","hashOfConfig":"72"},{"size":2221,"mtime":1572179213279,"results":"123","hashOfConfig":"72"},{"size":2990,"mtime":1608435005811,"results":"124","hashOfConfig":"72"},{"size":60,"mtime":1608514235298,"results":"125","hashOfConfig":"72"},{"size":538,"mtime":1571659541243,"results":"126","hashOfConfig":"72"},{"size":258,"mtime":1608510889280,"results":"127","hashOfConfig":"72"},{"size":35,"mtime":1572176577103,"results":"128","hashOfConfig":"72"},{"size":120,"mtime":1572176566907,"results":"129","hashOfConfig":"72"},{"size":1128,"mtime":1608548532346,"results":"130","hashOfConfig":"72"},{"size":455,"mtime":1571572556359,"results":"131","hashOfConfig":"72"},{"size":732,"mtime":1566618354420,"results":"132","hashOfConfig":"72"},{"size":251,"mtime":1566417716723,"results":"133","hashOfConfig":"72"},{"size":1300,"mtime":1608510941989,"results":"134","hashOfConfig":"72"},{"size":7244,"mtime":1608508559512,"results":"135","hashOfConfig":"72"},{"size":608,"mtime":1608510857825,"results":"136","hashOfConfig":"72"},{"size":113,"mtime":1608513512960,"results":"137","hashOfConfig":"72"},{"size":308,"mtime":1608530490908,"results":"138","hashOfConfig":"72"},{"size":236,"mtime":1608530373084,"results":"139","hashOfConfig":"72"},{"size":174,"mtime":1608532460631,"results":"140","hashOfConfig":"72"},{"size":118,"mtime":1608548439739,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"1otw1ip",{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"144"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"144"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"144"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"178","usedDeprecatedRules":"144"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"144"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"192","usedDeprecatedRules":"144"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"195","usedDeprecatedRules":"144"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"198","usedDeprecatedRules":"144"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"201","usedDeprecatedRules":"144"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"204","usedDeprecatedRules":"144"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"213","usedDeprecatedRules":"144"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"222","usedDeprecatedRules":"144"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"231","usedDeprecatedRules":"144"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"144"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"144"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"144"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"144"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"144"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"263","usedDeprecatedRules":"264"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"267","usedDeprecatedRules":"144"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"270","usedDeprecatedRules":"144"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"144"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"290","usedDeprecatedRules":"144"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"293","usedDeprecatedRules":"144"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"144"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\index.tsx",[],["309","310"],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\serviceWorker.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\App.tsx",["311"],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\ManageAccounts.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\Import.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\createAccount\\CreateAccount.tsx",["312","313"],"import React, { useState } from \"react\";\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { AccountType, AccountController, ImportAccount } from \"../../models\";\r\nimport { toNameValue } from \"../../extensions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { actionCreators } from \"../../store/Accounts\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nimport { ImportSettings } from \"./ImportSettings\";\r\nimport { BsPrefixProps, ReplaceProps } from \"react-bootstrap/helpers\";\r\nimport { usePageTitle } from \"../../hooks\";\r\n\r\nexport const CreateAccount: React.FC = () => {\r\n\r\n    usePageTitle(\"Create Account\");\r\n\r\n    const dispatch = useDispatch();\r\n    bindActionCreators(actionCreators, dispatch);\r\n\r\n    const accountTypes = toNameValue(AccountType);\r\n\r\n    const accountControllers = toNameValue(AccountController);\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [balance, setBalance] = useState(0);\r\n    const [accountType, setAccountType] = useState(AccountType.Transaction);\r\n    const [accountController, setAccountController] = useState(AccountController.Manual);\r\n    const [importerTypeId, setImporterTypeId] = useState(0);\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        const importAccount: ImportAccount = accountController === AccountController.Import ? { importerTypeId: importerTypeId } : null;\r\n\r\n        dispatch(actionCreators.createAccount({\r\n            id: null,\r\n            name: name,\r\n            description: description,\r\n            availableBalance: balance,\r\n            currentBalance: balance,\r\n            accountType: accountType,\r\n            controller: accountController,\r\n            balanceUpdated: new Date(),\r\n            includeInPosition: true,\r\n        }, importAccount));\r\n\r\n        setSubmitted(true);\r\n    }\r\n\r\n    if (submitted) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Create Account</h1>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"AccountName\" >\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control type=\"text\" required maxLength={50} value={name} onChange={(e: any) => setName(e.currentTarget.value)} />\r\n                    <Form.Control.Feedback type=\"invalid\">Please enter a name</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"AccountDescription\" >\r\n                    <Form.Label >Description</Form.Label>\r\n                    <Form.Control type=\"text\" as=\"textarea\" required maxLength={255} value={description} onChange={(e: any) => setDescription(e.currentTarget.value)} />\r\n                    <Form.Control.Feedback type=\"invalid\">Please enter a description</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"OpeningBalance\" >\r\n                    <Form.Label>Opening Balance</Form.Label>\r\n                    <InputGroup>\r\n                        <InputGroup.Prepend>$</InputGroup.Prepend>\r\n                        <Form.Control type=\"number\" required value={balance.toString()} onChange={(e: any) => setBalance(e.currentTarget.value)} />\r\n                    </InputGroup>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"AccountType\" >\r\n                    <Form.Label>Type</Form.Label>\r\n                    <Form.Control as=\"select\" value={accountType.toString()} onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setAccountType(parseInt(e.currentTarget.value))}>\r\n                        {accountTypes.map(a =>\r\n                            <option value={a.value} key={a.value}>{a.name}</option>\r\n                        )}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"AccountController\">\r\n                    <Form.Label>Controller</Form.Label>\r\n                    <Form.Control as=\"select\" value={accountController.toString()} onChange={(e: any) => setAccountController(parseInt(e.currentTarget.value))}>\r\n                        {accountControllers.map(a =>\r\n                            <option value={a.value} key={a.value}>{a.name}</option>\r\n                        )}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <ImportSettings show={accountController === AccountController.Import} selectedId={importerTypeId} onChange={(e) => setImporterTypeId(e)} />\r\n                <Button type=\"submit\" variant=\"primary\">Create</Button>\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n\r\nCreateAccount.displayName = \"CreateAccount\";","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\Home\\Home.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\Transactions.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTagRules\\TransactionTagRules.tsx",["314","315","316","317"],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\settings\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\extensions.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\createAccount\\ImportSettings.tsx",["318","319"],"import React, { useState } from \"react\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { State } from \"../../store/state\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { useImporterTypes } from \"../../services\";\r\n\r\nexport const ImportSettings: React.FC<ImportSettingsProps> = (props) => {\r\n\r\n    const importerTypes = useImporterTypes();\r\n\r\n    const [selectedId, setSelectedId] = useState(0);\r\n\r\n    return (\r\n        <Form.Group controlId=\"importer-type\" hidden={!props.show}>\r\n            <Form.Label>Importer Type</Form.Label>\r\n            <Form.Control as=\"select\" value={selectedId.toString()} required onChange={(e) => { setSelectedId(parseInt(e.currentTarget.value)); props.onChange && props.onChange(parseInt(e.currentTarget.value)) }}>\r\n                <option value=\"0\">Select...</option>\r\n                {importerTypes.data?.map(a =>\r\n                    <option value={a.id} key={a.id}>{a.type}</option>\r\n                )}\r\n            </Form.Control>\r\n        </Form.Group>\r\n    );\r\n}\r\n\r\nImportSettings.displayName = \"AccountControllerSettings\";\r\n\r\nexport interface ImportSettingsProps {\r\n    show: boolean;\r\n    onChange?: (id: number) => void;\r\n    selectedId: number;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionList.tsx",["320"],"import \"./TransactionList.scss\";\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport { actionCreators as accountActionCreators } from \"../../store/Accounts\";\r\nimport { SetTransactionListFilter, SetCurrentPage } from \"../../store/Transactions\";\r\nimport { State } from \"../../store/state\";\r\nimport { Account } from \"../../models\";\r\nimport { TransactionRow } from \"./TransactionRow\";\r\nimport { TransactionRowIng } from \"./TransactionRowIng\";\r\nimport { useTransactions } from \"../../services\";\r\nimport { useParams } from \"react-router\";\r\n\r\nexport const TransactionList: React.FC<TransactionListProps> = (props) => {\r\n\r\n    const { id } = useParams<any>();\r\n\r\n    const pageNumber = useSelector((state: State) => state.transactions.currentPage);\r\n    const totalTransactions = useSelector((state: State) => state.transactions.total);\r\n    const pageSize = useSelector((state: State) => state.transactions.pageSize);\r\n    const filterTagged = useSelector((state: State) => state.transactions.filterTagged);\r\n    const dispatch = useDispatch();\r\n\r\n    const transactionsQuery = useTransactions(id, filterTagged, pageSize, pageNumber);\r\n    const transactions = transactionsQuery.data?.transactions;\r\n\r\n    bindActionCreators(accountActionCreators, dispatch);\r\n\r\n    const numberOfPages = Math.ceil(totalTransactions / pageSize);\r\n  \r\n    const showNext = pageNumber < numberOfPages;\r\n    const showPrev = pageNumber > 1;\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"filter-panel\">\r\n                <input id=\"filter-tagged\" type=\"checkbox\" onChange={(e) => dispatch({  type: SetTransactionListFilter, data: e.currentTarget.checked})} />\r\n                <label htmlFor=\"filter-tagged\">Only show transactions without tags</label>\r\n            </div>\r\n            <Table striped bordered={false} borderless className=\"transactions\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Date</th>\r\n                        <th>Description</th>\r\n                        <th>Amount</th>\r\n                        <th>Tags</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {transactions && transactions.map((t) => t.extraInfo ? <TransactionRowIng key={t.id} transaction={t} /> : <TransactionRow key={t.id} transaction={t} />)}\r\n                </tbody>\r\n                <tfoot>\r\n                    <tr>\r\n                        <td colSpan={2}>Page {pageNumber} of {numberOfPages} ({totalTransactions} transactions)</td>\r\n                        <td colSpan={2}>\r\n                            <button disabled={!showPrev} className=\"btn\" onClick={() => dispatch({type: SetCurrentPage, data: 1})}>&lt;&lt;</button>\r\n                            <button disabled={!showPrev} className=\"btn\" onClick={() => dispatch({type: SetCurrentPage, data: Math.max(pageNumber - 1, 1)})}>&lt;</button>\r\n                            <button disabled={!showNext} className=\"btn\" onClick={() => dispatch({type: SetCurrentPage, data: Math.min(pageNumber + 1, numberOfPages)})}>&gt;</button>\r\n                            <button disabled={!showNext} className=\"btn\" onClick={() => dispatch({type: SetCurrentPage, data: numberOfPages })}>&gt;&gt;</button>\r\n                        </td>\r\n                    </tr>\r\n                </tfoot>\r\n            </Table>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport interface TransactionListProps {\r\n    account: Account;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTagRules\\TransactionTagRuleRow.tsx",["321","322"],"﻿import React, { useState, useEffect } from \"react\";\r\n\r\nimport { TransactionTagRule, TransactionTag } from \"../../models\";\r\nimport { TagPanel } from \"../../components/TagPanel\";\r\nimport { ClickableIcon } from \"../../components/ClickableIcon\";\r\nimport { useCreateTag, useTags } from \"../../services/TransactionTagService\";\r\nimport { useAddTransactionTagRuleTag, useDeleteRule, useRemoveTransactionTagRuleTag } from \"../../services\";\r\n\r\nexport const TransactionTagRuleRow: React.FC<TransactionTagRuleRowProps> = (props) => {\r\n\r\n    const transactionRow = useTransactionTagRuleRowEvents(props);\r\n\r\n    const fullTagsListQuery = useTags();\r\n    const fullTagsList = fullTagsListQuery.data ?? [];\r\n\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !transactionRow.tags.some((tt) => t.id === tt.id)));\r\n    }, [transactionRow.tags, fullTagsList]);\r\n\r\n    return (\r\n        <tr>\r\n            <td>{props.rule.contains}</td>\r\n            <TagPanel as=\"td\" selectedItems={transactionRow.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={transactionRow.addTag} onRemove={transactionRow.removeTag} onCreate={transactionRow.createTag} allowCreate={true} />\r\n            <td><span onClick={transactionRow.deleteRule}><ClickableIcon icon=\"trash-alt\" title=\"Delete\" /></span></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nTransactionTagRuleRow.displayName = \"TransactionTagRuleRow\";\r\n\r\nfunction useTransactionTagRuleRowEvents(props: TransactionTagRuleRowProps) {\r\n\r\n    const createTransactionTag = useCreateTag();\r\n    const addTransactionTagRuleTag = useAddTransactionTagRuleTag();\r\n    const removeTransactionTagRuleTag = useRemoveTransactionTagRuleTag();\r\n    \r\n    const deleteTransactionTagRule = useDeleteRule();\r\n\r\n    const [tags, setTags] = useState(props.rule.tags);\r\n\r\n    useEffect(() => {\r\n        setTags(props.rule.tags);\r\n    }, [props.rule.tags]);\r\n\r\n    const deleteRule = () => {\r\n        deleteTransactionTagRule.mutate({accountId: props.accountId, ruleId: props.rule.id});\r\n    };\r\n\r\n    const createTag = (name: string) => {\r\n        createTransactionTag.mutate({ name }, {\r\n            onSuccess: (data) => {\r\n                addTransactionTagRuleTag.mutate({ accountId: props.accountId, ruleId: props.rule.id, tagId: data.id});\r\n            }\r\n        });\r\n    };\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        addTransactionTagRuleTag.mutate({ accountId: props.accountId, ruleId: props.rule.id, tagId: tag.id});\r\n        setTags([ ...tags, tag]);\r\n    };\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        removeTransactionTagRuleTag.mutate({ accountId: props.accountId, ruleId: props.rule.id, tagId: tag.id});\r\n        setTags(tags.filter((t) => t.id !== tag.id));\r\n    };\r\n\r\n    return {\r\n        deleteRule,\r\n        createTag,\r\n        addTag,\r\n        removeTag,\r\n        tags,\r\n    };\r\n}\r\n\r\nexport interface TransactionTagRuleRowProps {\r\n    rule: TransactionTagRule;\r\n    accountId: string;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\ClickableIcon.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\settings\\Settings.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\TransactionTags.tsx",["323","324","325"],"import \"./TransactionTags.scss\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport { TransactionTagRow } from \"./TransactionTagRow\";\r\n\r\nimport { TagPanel } from \"../../components\";\r\nimport { TransactionTag } from \"../../models\";\r\nimport { ClickableIcon } from \"../../components/ClickableIcon\";\r\nimport { usePageTitle } from \"../../hooks\";\r\nimport { useAddSubTag, useCreateTag, useRemoveSubTag, useTags } from \"../../services\";\r\n\r\nexport const TransactionTags: React.FC = () => {\r\n\r\n    usePageTitle(\"Tags\");\r\n\r\n    const { newTag, fullTagsList, tagsList, addTag, createTag, removeTag, nameChange } = useComponentState();\r\n\r\n    return (\r\n        <>\r\n        <h1>Transaction Tags</h1>\r\n        <Table striped bordered={false} borderless className=\"transaction-tags\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Tags</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td><input type=\"text\" placeholder=\"Tag name\" value={newTag.name} onChange={nameChange} /></td>\r\n                    <TagPanel as=\"td\" selectedItems={newTag.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={addTag} onCreate={createTag} onRemove={removeTag} allowCreate={false} alwaysShowEditPanel={true} />\r\n                    <td><span onClick={createTag}><ClickableIcon icon=\"check-circle\" title=\"Save\" /></span></td>\r\n                </tr>\r\n                {fullTagsList && fullTagsList.map((t) => <TransactionTagRow key={t.id} tag={t} />)}\r\n            </tbody>\r\n        </Table>\r\n        </>\r\n    );\r\n}\r\n\r\nconst useComponentState = () => {\r\n\r\n    const blankTag = {id: 0, name: \"\", tags: []} as TransactionTag;\r\n\r\n    const fullTagsListQuery = useTags();\r\n    const fullTagsList = fullTagsListQuery.data ?? [];\r\n\r\n    \r\n    const createTransactionTag = useCreateTag();\r\n    const addSubTag = useAddSubTag();\r\n    const removeSubTag = useRemoveSubTag();\r\n    \r\n\r\n    const [newTag, setNewTag] = useState(blankTag); \r\n    const [tagsList, setTagsList] = useState([]);\r\n  \r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !newTag.tags.some((tt) => t.id === tt.id)));\r\n    }, [newTag.tags, fullTagsList]);\r\n\r\n    const createTag = () => {\r\n        createTransactionTag.mutate(newTag);\r\n        setNewTag(blankTag);\r\n    }\r\n\r\n    const createSubTag = (name: string) => {\r\n        createTransactionTag.mutate({ name });\r\n    }\r\n\r\n    const nameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewTag({...newTag, name: e.currentTarget.value});\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        newTag.tags.push(tag);\r\n        setNewTag(newTag);\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        newTag.tags = newTag.tags.filter((t) => t.id !== tag.id);\r\n        setNewTag(newTag);\r\n    }\r\n\r\n    return {\r\n        newTag,\r\n        fullTagsList,\r\n        tagsList,\r\n        \r\n        createTag,\r\n        createSubTag,\r\n        addTag,\r\n        removeTag,\r\n\r\n        nameChange,\r\n    };\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\App.ts",["326"],"﻿import { App } from \"./state\";\r\nimport { ActionWithData } from \"./redux-extensions\";\r\nimport { Dispatch } from \"react\";\r\n\r\nexport const initialState: App = {\r\n    baseUrl: \"/\",\r\n};\r\n\r\nexport const ShowMessage = \"ShowMessage\";\r\n\r\nexport const genericCaller = (dispatch: Dispatch<ActionWithData<string>>, callback: () => any) => {\r\n    try {\r\n        return callback();\r\n    }\r\n    catch (error) {\r\n        dispatch({ type: \"ShowMessage\", data: (error as Error).message});\r\n    }\r\n}\r\n\r\nexport const reducer = (state: App, action:ActionWithData<string>) => {\r\n    state = state || initialState;\r\n\r\n    switch (action.type) {\r\n        case \"ShowMessage\":\r\n            return {\r\n                ...state,\r\n                message: action.data,\r\n            }\r\n    }\r\n\r\n    return state;\r\n};\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Accounts.ts",["327"],"﻿import { Dispatch } from \"redux\";\r\n\r\nimport HttpClient from \"../services/HttpClient\";\r\nimport { ActionWithData } from \"./redux-extensions\";\r\nimport { Accounts, State } from \"./state\";\r\nimport { Account, ImportAccount } from \"../models\";\r\nimport { ImportService } from \"../services\";\r\n\r\nexport const ActionTypes = {\r\n    CreateAccount: \"CreateAccount\",\r\n    AccountCreated: \"AccountCreated\",\r\n    ReceiveAccounts: \"ReceiveAccounts\",\r\n    ReceiveAccount: \"ReceiveAccount\",\r\n    SetSelectedAccount: \"SetSelectedAccount\",\r\n    ImportTransactions: \"ImportTransactions\",\r\n};\r\n\r\nexport const initialState: Accounts = {\r\n    accounts: [],\r\n    areLoading: false,\r\n    virtualAccounts: [],\r\n    selectedAccount: null,\r\n    position: 0,\r\n};\r\n\r\nexport const actionCreators = {\r\n\r\n    createAccount: (account: Account, importAccount: ImportAccount) => async (dispatch: Dispatch, getState: () => State) => {\r\n        const state = getState();\r\n\r\n        dispatch({ type: ActionTypes.CreateAccount });\r\n\r\n        const url = `api/accounts`;\r\n\r\n        const client = new HttpClient(state.app.baseUrl);\r\n\r\n        const newAccount = await client.post<{ account: Account, importAccount: ImportAccount }, Account>(url, { account, importAccount });\r\n\r\n        dispatch({ type: ActionTypes.AccountCreated, data: newAccount })\r\n    },\r\n\r\n    importTransactions: (id: string, file: File) => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const service = new ImportService(getState());\r\n\r\n        await service.importTransactions(id, file);\r\n    },\r\n};\r\n\r\nexport const reducer = (state: Accounts = initialState, action: ActionWithData<any>): Accounts => {\r\n\r\n    switch (action.type) {\r\n        case ActionTypes.ReceiveAccounts:\r\n            return {\r\n                ...state,\r\n                accounts: action.data.accounts,\r\n                areLoading: false,\r\n                virtualAccounts: action.data.virtualAccounts,\r\n                position: action.data.position,\r\n            };\r\n\r\n        case ActionTypes.ReceiveAccount:\r\n        case ActionTypes.SetSelectedAccount:\r\n            return {\r\n                ...state,\r\n                selectedAccount: action.data,\r\n            };\r\n\r\n        case ActionTypes.AccountCreated:\r\n            return {\r\n                ...state,\r\n                accounts: [...state.accounts, action.data],\r\n            }\r\n\r\n\r\n    }\r\n\r\n    return state;\r\n};\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Transactions.ts",["328","329","330"],"﻿import { Dispatch } from \"redux\";\r\n\r\nimport { ActionWithData } from \"./redux-extensions\";\r\nimport { Transactions, State } from \"./state\";\r\n\r\nexport const SetTransactionListFilter = \"SetTransactionListFilter\";\r\nexport const SetCurrentPage = \"SetCurrentPage\";\r\n\r\nconst initialState: Transactions = {\r\n    areLoading: false,\r\n    currentPage: 1,\r\n    pageSize: 50,\r\n    total: 0,\r\n    filterTagged: false,\r\n};\r\n\r\nexport const reducer = (state: Transactions = initialState, action: ActionWithData<any>): Transactions => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SetCurrentPage:\r\n            return {\r\n                ...state,\r\n                currentPage: action.data\r\n            };\r\n\r\n        case SetTransactionListFilter: {\r\n            return {\r\n                ...state,\r\n                filterTagged: action.data,\r\n            }\r\n        }\r\n    }\r\n\r\n    return state;\r\n};\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionRow.tsx",["331","332","333"],"﻿import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport { Transaction, TransactionTag } from \"../../models\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { TagPanel } from \"../../components\";\r\nimport { useAddTransactionTag, useCreateTag, useRemoveTransactionTag, useTags } from \"../../services\";\r\n\r\nexport const TransactionRow: React.FC<TransactionRowProps> = (props) => {\r\n\r\n    //const [editMode, setEditMode] = useState(false);\r\n    const transactionRow = useTransactionRowEvents(props);\r\n\r\n    const fullTagsListQuery = useTags();\r\n    const fullTagsList = fullTagsListQuery.data ?? [];\r\n\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !transactionRow.tags.some((tt) => t.id === tt.id)));\r\n    }, [transactionRow.tags, fullTagsList]);\r\n\r\n    return (\r\n        <tr>\r\n            <td>{moment(props.transaction.transactionTime).format(\"YYYY-MM-DD\")}</td>\r\n            <td>{props.transaction.description}</td>\r\n            <td>{props.transaction.amount.toLocaleString(\"en-AU\", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n            <TagPanel as=\"td\" selectedItems={transactionRow.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={transactionRow.addTag} onRemove={transactionRow.removeTag} onCreate={transactionRow.createTag} allowCreate={true} />\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction useTransactionRowEvents(props: TransactionRowProps) {\r\n\r\n    const [tags, setTags] = useState(props.transaction.tags);\r\n\r\n    const addTransactionTag = useAddTransactionTag();\r\n    const removeTransactionTag = useRemoveTransactionTag();\r\n    const createTransactionTag = useCreateTag();\r\n\r\n    useEffect(() => {\r\n        setTags(props.transaction.tags);\r\n    }, [props.transaction.tags]);\r\n\r\n    const createTag = (name: string) => {\r\n        createTransactionTag.mutate({ name }, {\r\n            onSuccess: (data) => {\r\n                addTransactionTag.mutate({ transactionId: props.transaction.id, tagId: data.id});\r\n            }\r\n        });\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        addTransactionTag.mutate({ transactionId: props.transaction.id, tagId: tag.id });\r\n        setTags(tags.concat([tag]));\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        removeTransactionTag.mutate({ transactionId: props.transaction.id, tagId: tag.id });\r\n        setTags(tags.filter((t) => t.id !== tag.id));\r\n    }\r\n\r\n    return {\r\n        createTag,\r\n        addTag,\r\n        removeTag,\r\n        tags,\r\n    };\r\n}\r\n\r\nexport interface TransactionRowProps {\r\n    transaction: Transaction;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionRowIng.tsx",["334","335","336"],"﻿import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport { Transaction, TransactionTag } from \"../../models\";\r\nimport { TagPanel } from \"../../components\";\r\nimport { TransactionRowProps } from \"./TransactionRow\";\r\nimport { useAddTransactionTag, useCreateTag, useRemoveTransactionTag, useTags } from \"../../services\";\r\n\r\nexport const TransactionRowIng: React.FC<TransactionRowProps> = (props) => {\r\n\r\n    const transactionRow = useTransactionRowEvents(props);\r\n\r\n    const fullTagsListQuery = useTags();\r\n    const fullTagsList = fullTagsListQuery.data ?? [];\r\n\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !transactionRow.tags.some((tt) => t.id === tt.id)));\r\n    }, [transactionRow.tags, fullTagsList]);\r\n\r\n    return (\r\n        <tr>\r\n            <td>{moment(props.transaction.transactionTime).format(\"YYYY-MM-DD\")}</td>\r\n            <td>{props.transaction.description}</td>\r\n            <td>{props.transaction.amount.toLocaleString(\"en-AU\", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n            <TagPanel as=\"td\" selectedItems={transactionRow.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={transactionRow.addTag} onRemove={transactionRow.removeTag} onCreate={transactionRow.createTag} allowCreate={true} />\r\n        </tr>\r\n    );\r\n}\r\n\r\nTransactionRowIng.displayName = \"TransactionRowIng\";\r\n\r\nfunction useTransactionRowEvents(props: TransactionRowProps) {\r\n\r\n    const [tags, setTags] = useState(props.transaction.tags);\r\n\r\n    const addTransactionTag = useAddTransactionTag();\r\n    const removeTransactionTag = useRemoveTransactionTag();\r\n    const createTransactionTag = useCreateTag();\r\n\r\n    useEffect(() => {\r\n        setTags(props.transaction.tags);\r\n    }, [props.transaction.tags]);\r\n\r\n    const createTag = (name: string) => {\r\n        createTransactionTag.mutate({ name }, {\r\n            onSuccess: (data) => {\r\n                addTransactionTag.mutate({ transactionId: props.transaction.id, tagId: data.id});\r\n            }\r\n        });\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        addTransactionTag.mutate({ transactionId: props.transaction.id, tagId: tag.id });\r\n        setTags(tags.concat([tag]));\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        removeTransactionTag.mutate({ transactionId: props.transaction.id, tagId: tag.id });\r\n        setTags(tags.filter((t) => t.id !== tag.id));\r\n    }\r\n\r\n    return {\r\n        createTag,\r\n        addTag,\r\n        removeTag,\r\n        tags,\r\n    };\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\TagPanel.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTagRule.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTag.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Transaction.ts",["337"],"﻿import { TransactionTag } from \"./TransactionTag\";\r\n\r\nexport enum TransactionType {\r\n    Credit = 1,\r\n    Debit = 2,\r\n    RecurringCredit = 3,\r\n    RecurringDebit = 4,\r\n    BalanceAdjustment = 5,\r\n}\r\n\r\nexport interface Transaction {\r\n    id: string;\r\n    reference: string;\r\n    accountId: string;\r\n    amount: number;\r\n    description: string;\r\n    transactionTime: Date;\r\n    transactionType: TransactionType;\r\n    tags: TransactionTag[];\r\n    extraInfo: any;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\ImporterType.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Account.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\TransactionTagRow.tsx",["338","339"],"﻿import React, { useState, useEffect } from \"react\";\r\n\r\nimport { TransactionTag } from \"../../models\";\r\nimport { TagPanel } from \"../../components/TagPanel\";\r\nimport { ClickableIcon } from \"../../components/ClickableIcon\";\r\nimport { useAddSubTag, useCreateTag, useDeleteTag, useRemoveSubTag, useTags } from \"../../services\";\r\n\r\nexport const TransactionTagRow: React.FC<TransactionTagRowProps> = (props) => {\r\n\r\n    const transactionRow = useTransactionTagRowEvents(props);\r\n\r\n    const fullTagsListQuery = useTags();\r\n    const fullTagsList = fullTagsListQuery.data ?? [];\r\n\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => t.id !== props.tag.id && !transactionRow.tags.some((tt) => t.id === tt.id)));\r\n    }, [transactionRow.tags, fullTagsList]);\r\n\r\n    return (\r\n        <tr>\r\n            <td>{props.tag.name}</td>\r\n            <TagPanel as=\"td\" selectedItems={transactionRow.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={transactionRow.addTag} onRemove={transactionRow.removeTag} onCreate={transactionRow.createTag} allowCreate={true} />\r\n            <td><span onClick={transactionRow.deleteTag}><ClickableIcon icon=\"trash-alt\" title=\"Delete\" /></span></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction useTransactionTagRowEvents(props: TransactionTagRowProps) {\r\n\r\n    const [tags, setTags] = useState(props.tag.tags);\r\n\r\n    const createTransactionTag = useCreateTag();\r\n    const deleteTransactionTag = useDeleteTag();\r\n    const addSubTag = useAddSubTag();\r\n    const removeSubTag = useRemoveSubTag();\r\n\r\n    useEffect(() => {\r\n        setTags(props.tag.tags);\r\n    }, [props.tag.tags]);\r\n\r\n    const createTag = (name: string) => {\r\n        createTransactionTag.mutate({ name }, {\r\n            onSuccess: (data) => {\r\n                addSubTag.mutate({ tagId: props.tag.id, subTagId: data.id});\r\n            }\r\n        });\r\n    }\r\n\r\n    const deleteTag = () => {\r\n\r\n        if (window.confirm(\"Deleting this tag will remove it from all rules and transactions. Are you sure?\")) {\r\n            deleteTransactionTag.mutate({ id: props.tag.id});\r\n        }\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        addSubTag.mutate({ tagId: props.tag.id, subTagId: tag.id });\r\n        setTags(tags.concat([tag]));\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        removeSubTag.mutate({ tagId: props.tag.id, subTagId: tag.id});\r\n        setTags(tags.filter((t) => t.id !== tag.id));\r\n    }\r\n\r\n    return {\r\n        createTag,\r\n        deleteTag,\r\n        addTag,\r\n        removeTag,\r\n        tags,\r\n    };\r\n}\r\n\r\nexport interface TransactionTagRowProps {\r\n    tag: TransactionTag;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\Upload.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\PageHeader.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\ComboBox.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\CloseBadge.tsx",["340"],"﻿import \"./CloseBadge.scss\";\r\n\r\nimport React, { PropsWithChildren } from \"react\";\r\nimport { Badge, BadgeProps } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport const CloseBadge: React.FC<PropsWithChildren<CloseBadgeProps>> = (props) => {\r\n\r\n    const click = (e:React.MouseEvent<any, any>) => {\r\n        e.defaultPrevented = true;\r\n        e.stopPropagation();\r\n\r\n        props.onClose && props.onClose();\r\n    }\r\n\r\n    let { onClick, className, ...other } = props;\r\n\r\n    className = (className + \" close-badge\").trim();\r\n\r\n    return (<Badge {...other} className={className} >{props.children}<span onClick={click}><FontAwesomeIcon icon=\"times-circle\" /></span></Badge>);\r\n}\r\n\r\nCloseBadge.displayName = \"CloseBadge\";\r\n\r\nexport interface CloseBadgeProps extends BadgeProps {\r\n    onClose?: () => void;\r\n    onClick?: () => void;\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountSummary.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountBalance.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionTagRuleService.ts",["341"],"import * as Models from \"../models\";\r\nimport { ServiceBase } from \"./ServiceBase\";\r\nimport HttpClient, { httpClient } from \"./HttpClient\";\r\nimport { useApiQuery } from \"./useApiQuery\";\r\nimport { useQueryClient } from \"react-query\";\r\nimport { useMutation } from \"react-query\";\r\n\r\nexport const useRules = (accountId: string) => useApiQuery<Models.TransactionTagRules>([\"rules\", accountId], `api/accounts/${accountId}/transaction/tag/rules`);\r\n\r\nexport const useRunRules = () => useMutation<null, null, { accountId: string }>(async (variables) => await httpClient.post(`api/accounts/${variables.accountId}/transaction/tag/rules/run`));\r\n\r\nexport const useAddTransactionTagRuleTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation<Models.TransactionTagRule, null, { accountId: string, ruleId: number, tagId: number }>(async (variables) => (await httpClient.put<Models.TransactionTagRule>(`api/accounts/${variables.accountId}/transaction/tag/rules/${variables.ruleId}/tag/${variables.tagId}`)).data, {\r\n        onSuccess: (data: Models.TransactionTagRule, variables: { accountId: string, ruleId: number, tagId: number }) => {\r\n            queryClient.setQueryData<Models.TransactionTagRule>([\"transactionrules\", { id: variables.ruleId }], data);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useRemoveTransactionTagRuleTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation<Models.TransactionTagRule, null, { accountId: string, ruleId: number, tagId: number }>(async (variables) => (await httpClient.delete<Models.TransactionTagRule>(`api/accounts/${variables.accountId}/transaction/tag/rules/${variables.ruleId}/tag/${variables.tagId}`)).data, {\r\n        onSuccess: (data: Models.TransactionTagRule, variables: { accountId: string, ruleId: number, tagId: number }) => {\r\n            queryClient.setQueryData<Models.TransactionTagRule>([\"transactionrules\", { id: variables.ruleId }], data);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useCreateRule = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation<Models.TransactionTagRule, null, { accountId: string; rule: Models.TransactionTagRule }>(async (variables) => (await httpClient.post<Models.TransactionTagRule>(`api/accounts/${variables.accountId}/transaction/tag/rules`, variables.rule)).data, {\r\n        onSuccess: (data: Models.TransactionTagRule) => {\r\n            queryClient.setQueryData<Models.TransactionTagRule>([\"tags\", { id: data.id }], data);\r\n            let allRules = queryClient.getQueryData<Models.TransactionTagRule[]>([\"transactionrules\"]);\r\n            allRules = allRules.sort((t1, t2) => t1.contains.localeCompare(t2.contains));\r\n            queryClient.setQueryData<Models.TransactionTagRule[]>([\"transactionrules\"], allRules);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useDeleteRule = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation<null, null, { accountId: string; ruleId: number}>(async (variables) => (await httpClient.delete(`api/accounts/${variables.accountId}/transaction/tag/rules/${variables.ruleId}`)).data, {\r\n        onSuccess: (variables: { accountId: string; ruleId: number}) => {\r\n            let allTags = queryClient.getQueryData<Models.TransactionTagRule[]>([\"transactionrules\"]);\r\n            allTags = allTags.filter(r => r.id !== (variables.ruleId));\r\n            allTags = allTags.sort((t1, t2) => t1.contains.localeCompare(t2.contains));\r\n            queryClient.setQueryData<Models.TransactionTagRule[]>([\"transactionrules\"], allTags);\r\n        }\r\n    });\r\n}\r\n\r\nexport class TransactionTagRuleService extends ServiceBase {\r\n\r\n/*    public async addTransactionTag(accountId: string, ruleId: number, tagId: number): Promise<Models.TransactionTagRule> {\r\n        const url = `api/accounts/${accountId}/transaction/tag/rules/${ruleId}/tag/${tagId}`;\r\n\r\n        const client = new HttpClient(this.state.app.baseUrl);\r\n\r\n        try {\r\n            return await client.put(url);\r\n        }\r\n        catch (response) {\r\n            super.handleError(response as Response);\r\n        }\r\n    }\r\n\r\n    public async removeTransactionTag(accountId: string, ruleId: number, tagId: number) {\r\n        const url = `api/accounts/${accountId}/transaction/tag/rules/${ruleId}/tag/${tagId}`;\r\n\r\n        const client = new HttpClient(this.state.app.baseUrl);\r\n\r\n        try {\r\n            return await client.delete(url);\r\n        }\r\n        catch (response) {\r\n            super.handleError(response as Response);\r\n        }\r\n    }\r\n\r\n    public async runRules(accountId: string) {\r\n        const url = `api/accounts/${accountId}/transaction/tag/rules/run`;\r\n\r\n        const client = new HttpClient(this.state.app.baseUrl);\r\n\r\n        try {\r\n            return await client.post(url, undefined);\r\n        }\r\n        catch (response) {\r\n            super.handleError(response as Response);\r\n        }\r\n    }*/\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionService.ts",["342"],"import { AxiosResponse } from \"axios\";\r\nimport { useMutation, useQueryClient } from \"react-query\";\r\n\r\nimport * as Models from \"../models\";\r\nimport { httpClient } from \"./HttpClient\";\r\nimport { useApiQuery } from \"./useApiQuery\";\r\n\r\nexport const useTransactions = (accountId: string, filterTagged: boolean, pageSize: number, pageNumber: number) =>\r\n    useApiQuery<Models.Transactions>([\"transactions\", accountId, filterTagged, pageSize, pageNumber], `api/accounts/${accountId}/transactions/${filterTagged ? \"untagged/\" : \"\"}${pageSize}/${pageNumber}`);\r\n\r\ninterface TransactionTagVariables {\r\n    transactionId: string,\r\n    tagId: number,\r\n}\r\n\r\nexport const useAddTransactionTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation<Models.Transaction, null, TransactionTagVariables>(async (variables) => (await httpClient.put<Models.Transaction>(`api/transactions/${variables.transactionId}/tag/${variables.tagId}`)).data, {\r\n        onSuccess: (data: Models.Transaction, variables: TransactionTagVariables) => {\r\n            queryClient.setQueryData<Models.Transaction>([\"transactions\", { id: variables.transactionId }], data);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useRemoveTransactionTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation<Models.Transaction, null, TransactionTagVariables>(async (variables) => (await httpClient.delete<Models.Transaction>(`api/transactions/${variables.transactionId}/tag/${variables.tagId}`)).data, {\r\n        onSuccess: (data: Models.Transaction, variables: TransactionTagVariables) => {\r\n            queryClient.setQueryData<Models.Transaction>([\"transactions\", { id: variables.transactionId }], data);\r\n        }\r\n    });\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionTagService.ts",["343","344"],"import * as Models from \"../models\";\r\nimport { ServiceBase } from \"./ServiceBase\";\r\nimport HttpClient, { httpClient } from \"./HttpClient\";\r\nimport { useApiQuery } from \"./useApiQuery\";\r\nimport { useMutation, useQueryClient } from \"react-query\";\r\n\r\ninterface TransactionTagVariables {\r\n    name: string;\r\n}\r\n\r\nexport const useTags = () => useApiQuery<Models.TransactionTag[]>([\"tags\"], `api/transaction/tags`);\r\n\r\nexport const useCreateTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation<Models.TransactionTag, null, TransactionTagVariables | Models.TransactionTag>(async (variables) => {\r\n\r\n        const name = (variables as Models.TransactionTag).name || (variables.name).trim();\r\n        const tags = (variables as Models.TransactionTag).tags || [];\r\n\r\n        return (await httpClient.put<Models.TransactionTag>(`api/transaction/tags/${encodeURIComponent(name)}`, tags)).data;\r\n    }, {\r\n        onSuccess: (data: Models.TransactionTag) => {\r\n            queryClient.setQueryData<Models.TransactionTag>([\"tags\", { id: data.id }], data);\r\n            let allTags = queryClient.getQueryData<Models.TransactionTag[]>([\"tags\"]);\r\n            allTags = allTags.sort((t1, t2) => t1.name.localeCompare(t2.name));\r\n            queryClient.setQueryData<Models.TransactionTag[]>([\"tags\"], allTags);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useDeleteTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation<null, null, { id: number }>(async (variables) => (await httpClient.delete(`api/transaction/tags/${variables.id}`)).data, {\r\n        onSuccess: (variables: { id: number }) => {\r\n            let allTags = queryClient.getQueryData<Models.TransactionTag[]>([\"tags\"]);\r\n            allTags = allTags.filter(r => r.id !== (variables.id));\r\n            allTags = allTags.sort((t1, t2) => t1.name.localeCompare(t2.name));\r\n            queryClient.setQueryData<Models.TransactionTag[]>([\"tags\"], allTags);\r\n        }\r\n    });\r\n}\r\n\r\nexport const useAddSubTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation<Models.TransactionTag, null, { tagId: number, subTagId: number }>(async (variables) => (await httpClient.put<Models.TransactionTag>(`api/transaction/tags/${variables.tagId}/tags/${variables.subTagId}`)).data, {\r\n        onSuccess: (data: Models.TransactionTag, variables: { tagId: number, subTagId: number }) => {\r\n            queryClient.setQueryData<Models.TransactionTag>([\"tags\", { id: variables.tagId }], data);\r\n        }\r\n    });\r\n}\r\nexport const useRemoveSubTag = () => {\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation<Models.TransactionTag, null, { tagId: number, subTagId: number }>(async (variables) => (await httpClient.delete<Models.TransactionTag>(`api/transaction/tags/${variables.tagId}/tags/${variables.subTagId}`)).data, {\r\n        onSuccess: (data: Models.TransactionTag, variables: { tagId: number, subTagId: number }) => {\r\n            queryClient.setQueryData<Models.TransactionTag>([\"tags\", { id: variables.tagId }], data);\r\n        }\r\n    });\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ReferenceDataService.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ImportService.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\AccountList.tsx",["345"],"import \"./AccountList.scss\";\r\n\r\nimport React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport { AccountRow } from \"./AccountRow\";\r\n//import VirtualAccountRow from \"./VirtualAccountRow\";\r\nimport { getBalanceString } from \"../../helpers\";\r\nimport { useAccounts } from \"../../services\";\r\n\r\nexport const AccountList: React.FC<AccountListProps> = () => {\r\n\r\n    const accountsQuery = useAccounts();\r\n\r\n    const { data } = accountsQuery;\r\n\r\n    const virtualAccountRows = [];\r\n\r\n/*    if (virtualAccounts) {\r\n        for (const account of virtualAccounts) {\r\n            virtualAccountRows.push(<VirtualAccountRow key={account.virtualAccountId} account={account} />);\r\n        }\r\n    }*/\r\n\r\n    const accountRows = [];\r\n    if (data?.accounts) {\r\n        for (const account of data?.accounts) {\r\n            accountRows.push(<AccountRow key={account.id} account={account} />);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"account-list\">\r\n                <h2>Accounts</h2>\r\n\r\n                <Table className=\"accounts\" hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Current Balance</th>\r\n                            {/*<th>Available Balance</th>*/}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {accountRows}\r\n                    </tbody>\r\n                    <tfoot>\r\n                        <tr>\r\n                            <td>Position</td>\r\n                            <td>{getBalanceString(data?.position)}</td>\r\n                        </tr>\r\n                    </tfoot>\r\n                </Table>\r\n            </section>\r\n           {/* <section className=\"account-list\">\r\n                <h2>Virtual Accounts</h2>\r\n\r\n                <Table id=\"virtualAccounts\" className=\"accounts\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Balance</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {virtualAccountRows}\r\n                    </tbody>\r\n                </Table>\r\n    </section>*/}\r\n        </>\r\n    );\r\n}\r\n\r\nAccountList.displayName = \"AccountList\";\r\n\r\nexport interface AccountListProps {\r\n\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\HttpClient.ts",["346","347"],"import axios, { AxiosInstance } from \"axios\";\r\nimport { request } from \"http\";\r\n\r\nimport { apiRequest } from \"../components\";\r\n\r\nexport type httpMethod = \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\";\r\n\r\nexport enum HttpStatusCodes {\r\n    OK = 200,\r\n    Created = 201,\r\n    Accepted = 202,\r\n    NoContent = 204,\r\n\r\n    BadRequest = 400,\r\n    Unauthorized = 401,\r\n    Forbidden = 403,\r\n    Conflict = 409,\r\n\r\n    InternalServerError = 500,\r\n    ServiceUnavailable = 403,\r\n}\r\n\r\nexport interface ProblemDetails {\r\n    detail: string,\r\n    instance?: string,\r\n    status?: number,\r\n    title?: string,\r\n    type: string,\r\n}\r\n\r\nexport let httpClient: AxiosInstance;\r\n\r\nexport const createHttpClient = (baseUrl: string) => {\r\n    const a = axios.create({\r\n    baseURL: baseUrl,\r\n    headers: {\r\n        \"Accept\": \"application/json\",\r\n    }});\r\n\r\n    httpClient = a;\r\n};\r\n\r\nexport default class HttpClient {\r\n\r\n\r\n    private baseUrl: string;\r\n    private csrf: string;\r\n\r\n    constructor(baseUrl: string) {\r\n        this.baseUrl = baseUrl;\r\n    }\r\n\r\n    public async get<T>(url: string): Promise<T> {\r\n        return this.fetch(url, \"GET\");\r\n    }\r\n\r\n    public async delete<T>(url: string): Promise<T> {\r\n        return this.fetch(url, \"DELETE\");\r\n    }\r\n\r\n    public patch<TRequest, TResponse>(url: string, data: TRequest): Promise<TResponse> {\r\n        return this.fetchWithBody(url, data, \"PATCH\");\r\n    }\r\n\r\n    public put<TRequest, TResponse>(url: string, data?: TRequest): Promise<TResponse> {\r\n\r\n        if (!data) {\r\n            return this.fetch(url, \"PUT\");\r\n        }\r\n\r\n        return this.fetchWithBody(url, data, \"PUT\");\r\n    }\r\n\r\n    public post<TRequest, TResponse>(url: string, data: TRequest): Promise<TResponse> {\r\n        return this.fetchWithBody(url, data, \"POST\");\r\n    }\r\n\r\n    postFile<TResponse>(url: string, file: File): Promise<TResponse> {\r\n        return this.fetchWithFormData(url, null, \"POST\", [file]);\r\n    }\r\n\r\n    postFiles<TResponse>(url: string, files: File[]): Promise<TResponse> {\r\n        return this.fetchWithFormData(url, null, \"POST\", files);\r\n    }\r\n\r\n    postFileAndData<TRequest, TResponse>(url: string, file: File, data: TRequest): Promise<TResponse> {\r\n        return this.fetchWithFormData(url, data, \"POST\", [file]);\r\n    }\r\n\r\n    postFilesAndData<TRequest, TResponse>(url: string, files: File[], data: TRequest): Promise<TResponse> {\r\n        return this.fetchWithFormData(url, data, \"POST\", files);\r\n    }\r\n\r\n    private async fetch<T>(url: string, method: httpMethod): Promise<T> {\r\n\r\n        const token = await this.getToken();\r\n\r\n        const response = await fetch(this.baseUrl + url, {\r\n            credentials: \"include\",\r\n            headers: new Headers({\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + token,\r\n            }),\r\n            method,\r\n        });\r\n\r\n        if (response.status === HttpStatusCodes.NoContent) {\r\n            return null;\r\n        }\r\n\r\n        if (response.ok) {\r\n            try {\r\n                return await response.json();\r\n            }\r\n            catch {\r\n                Promise.reject(response);\r\n            }\r\n        }\r\n\r\n\r\n        return Promise.reject(response);\r\n    }\r\n\r\n    private async fetchWithBody<TRequest, TResponse>(url: string, data: TRequest, method: httpMethod): Promise<TResponse> {\r\n\r\n        const token = await this.getToken();\r\n\r\n        const response = await fetch(this.baseUrl + url, {\r\n            body: JSON.stringify(data),\r\n            credentials: \"include\",\r\n            headers: new Headers({\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + token,\r\n                \"Content-Type\": \"application/json\",\r\n            }),\r\n            method,\r\n        });\r\n\r\n        if (response.status === HttpStatusCodes.NoContent || response.status === HttpStatusCodes.Accepted) {\r\n            return;\r\n        }\r\n\r\n        if (response.ok) {\r\n            try {\r\n                return await response.json();\r\n            }\r\n            catch {\r\n                Promise.reject(response);\r\n            }\r\n        }\r\n\r\n        return Promise.reject(response);\r\n    }\r\n\r\n    private async fetchWithFormData<TRequest, TResponse>(url: string, data: TRequest, method: httpMethod, files: File[]): Promise<TResponse> {\r\n        const token = await this.getToken();\r\n\r\n        const formData = new FormData();\r\n\r\n        for (const file of files) {\r\n            formData.append(\"file\", file, file.name);\r\n        }\r\n\r\n        const response = await fetch(this.baseUrl + url, {\r\n            body: formData,\r\n            credentials: \"include\",\r\n            headers: new Headers({\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + token,\r\n            }),\r\n            method,\r\n        });\r\n\r\n        if (response.status === HttpStatusCodes.NoContent || response.status === HttpStatusCodes.Accepted) {\r\n            return;\r\n        }\r\n\r\n        if (response.ok) {\r\n            try {\r\n                return await response.json();\r\n            }\r\n            catch {\r\n                Promise.reject(response);\r\n            }\r\n        }\r\n\r\n        return Promise.reject(response);\r\n    }\r\n\r\n    private getToken(): Promise<string> {\r\n        //return Promise.resolve(\"\");\r\n        //return window.getToken(apiRequest, \"loginRedirect\");\r\n        return Promise.resolve(window.token);\r\n    }\r\n\r\n    private readCookie(name: string): string {\r\n        const regex = new RegExp(`${name}=([^;]*)`);\r\n        const match = regex.exec(document.cookie);\r\n        if (match) {\r\n            return match[1];\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ServiceBase.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\Alert.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\VirtualAccountRow.tsx",["348"],"﻿import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { VirtualAccount } from \"../../store/state\";\r\n\r\nclass VirtualAccountRow extends Component<VirtualAccountRowProps, any> {\r\n\r\n    public render() {\r\n        return (\r\n            <tr>\r\n                <td className=\"account\">\r\n                    <div className=\"name\">{this.props.account.name}</div>\r\n                    <div className=\"description\">{this.props.account.description}</div>\r\n                    <nav className=\"desktop\">\r\n                        <ul>\r\n                            <li>\r\n                                <a href={\"/transactions/transfer/\" + this.props.account.virtualAccountId}>Transfer funds</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href={\"/transactions/history/\" + this.props.account.virtualAccountId}>Transactions</a>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>e\r\n                </td>\r\n                <td>{this.props.account.balance.toFixed(2) + \" \" + (this.props.account.balance < 0 ? \"D\" : \"C\") + \"R\"}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()(VirtualAccountRow);\r\n\r\ninterface VirtualAccountRowProps {\r\n    account: VirtualAccount;\r\n}\r\n",["349","350"],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\AccountRow.tsx",["351"],"﻿import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport * as Models from \"../../models\";\r\nimport { ActionTypes } from \"../../store/Accounts\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AccountController } from \"../../models\";\r\n\r\nimport { ManualAccountRow} from \"./ManualAccountRow\";\r\n\r\nexport const AccountRow: React.FC<AccountRowProps> = (props) => {\r\n\r\nconst { onRowClick } = useAccountRowCommonState(props);\r\n\r\n    switch (props.account.controller) {\r\n        case AccountController.Manual:\r\n            return <ManualAccountRow {...props} />\r\n        case AccountController.Import:\r\n    }\r\n\r\n    return (\r\n        <tr onClick={onRowClick} className=\"clickable\">\r\n            <td className=\"account\">\r\n                <div className=\"name\">{props.account.name}</div>\r\n            </td>\r\n            <td><span className={props.account.currentBalance < 0 ? \" negative\" : \"\"}>{props.account.currentBalance + (props.account.currentBalance < 0 ? \"D\" : \"C\") + \"R\"}</span></td>\r\n{/*}            <td><span className={props.account.availableBalance < 0 ? \" negative\" : \"\"}>{props.account.availableBalance + (props.account.availableBalance < 0 ? \"D\" : \"C\") + \"R\"}</span></td>*/}\r\n        </tr>\r\n    );\r\n}\r\n\r\nAccountRow.displayName = \"AccountRow\";\r\n\r\nexport interface AccountRowProps {\r\n    account: Models.Account;\r\n}\r\n\r\nexport const useAccountRowCommonState = (props: AccountRowProps) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    var history = useHistory();\r\n\r\n    const onRowClick = () => {\r\n        dispatch({ type: ActionTypes.SetSelectedAccount, data: props.account });\r\n        history.push(`accounts/${props.account.id}`);\r\n    };\r\n\r\n    return {\r\n        onRowClick,\r\n    };\r\n}\r\n\r\n/*const useRenderers = (props: AccountRowProps) => {\r\n\r\n    const renderManual = () => {\r\n\r\n    }\r\n\r\n    const renderImport = () => {\r\n\r\n    }\r\n\r\n    const getRenderer: Function = () => {\r\n        switch (props.account.controller) {\r\n            case AccountController.Manual:\r\n                return renderManual;\r\n                case AccountController.Import:\r\n                    return renderImport;\r\n\r\n        }\r\n\r\n        return {\r\n            useRenderers,\r\n        };\r\n\r\n    }\r\n}*/","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\ManualAccountRow.tsx",["352","353","354","355","356","357"],"﻿import React, { useState, useRef } from \"react\";\r\nimport { getBalanceString } from \"../../helpers\";\r\n\r\nimport { AccountRowProps, useAccountRowCommonState } from \"./AccountRow\";\r\nimport { useClickAway } from \"../../hooks\";\r\n\r\nexport const ManualAccountRow: React.FC<AccountRowProps> = (props) => {\r\n\r\n    const { balanceRef, avBalanceRef, editingBalance, editingAvBalance, balanceClick, avBalanceClick, balanceChange, avBalanceChange, balance, avBalance } = useComponentState(props);\r\n    const { onRowClick } = useAccountRowCommonState(props);\r\n\r\n    return (\r\n        <tr onClick={onRowClick} className=\"clickable\">\r\n            <td className=\"account\">\r\n                <div className=\"name\">{props.account.name}</div>\r\n            </td>\r\n            <td onClick={balanceClick} ref={balanceRef}> {!editingBalance && <span className={props.account.currentBalance < 0 ? \" negative\" : \"\"}>{getBalanceString(balance)}</span>}\r\n                {editingBalance && <input type=\"number\" value={balance} onChange={balanceChange} />}\r\n            </td>\r\n            {/*<td onClick={avBalanceClick} ref={avBalanceRef}> {!editingAvBalance && <span className={props.account.availableBalance < 0 ? \" negative\" : \"\"}>{getBalanceString(avBalance)}</span>}\r\n                {editingAvBalance && <input type=\"number\" value={avBalance} onChange={avBalanceChange} />}\r\n            </td>*/}\r\n        </tr>\r\n    );\r\n}\r\n\r\nManualAccountRow.displayName = \"ManualAccountRow\";\r\n\r\nconst useComponentState = (props: AccountRowProps) => {\r\n\r\n    //const dispatch = useDispatch();\r\n    //const history = useHistory();\r\n\r\n    const [editingBalance, setEditingBalance] = useState(false);\r\n    const [editingAvBalance, setEditingAvBalance] = useState(false);\r\n\r\n    const [balance, setBalance] = useState(props.account.currentBalance);\r\n    const [avBalance, setAvBalance] = useState(props.account.availableBalance);\r\n\r\n    const balanceRef = useRef(null);\r\n    useClickAway(setEditingBalance, balanceRef);\r\n\r\n    const avBalanceRef = useRef(null);\r\n    useClickAway(setEditingAvBalance, avBalanceRef);\r\n\r\n    const balanceClick = (e: React.MouseEvent<HTMLTableDataCellElement>) => {\r\n        setEditingBalance(true);\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const avBalanceClick = (e: React.MouseEvent<HTMLTableDataCellElement>) => {\r\n        setEditingAvBalance(true);\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const balanceChange =(e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setBalance(parseFloat(e.currentTarget.value));\r\n    }\r\n\r\n    const avBalanceChange =(e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setAvBalance(parseFloat(e.currentTarget.value));\r\n    }\r\n\r\n    return {\r\n        balanceRef,\r\n        avBalanceRef,\r\n\r\n        editingBalance,\r\n        editingAvBalance,\r\n\r\n        balanceClick,\r\n        avBalanceClick,\r\n\r\n        balanceChange,\r\n        avBalanceChange,\r\n\r\n        balance,\r\n        avBalance,\r\n    };\r\n}\r\n\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\clickAway.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\pageTitle.ts",["358"],"import { useEffect } from \"react\";\r\nimport { useApp } from \"../components\";\r\n\r\nexport function usePageTitle(title: string) {\r\n\r\n    const { appName } = useApp();\r\n\r\n    useEffect(() => {\r\n        document.title = `${title} : ${appName}`;\r\n    }, [title]);\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\helpers\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\helpers\\renderingHelpers.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\configureStore.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Layout.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Security.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Footer.tsx",["359"],"﻿import React from \"react\";\r\n\r\nexport const Footer = () => (\r\n    <footer>\r\n        Copyright &copy; Andrew McLachlan 2013. All rights reserved.<br />\r\n        <a href=\"http://www.andrewmclachlan.com\">www.andrewmclachlan.com</a>\r\n    </footer>\r\n);\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Header.tsx",["360","361","362"],"﻿import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useApp, useMsal } from \"../components\";\r\n\r\nexport const Header: React.FC<HeaderProps> = (props) => {\r\n\r\n    const appState = useApp();\r\n\r\n    const { loading, isAuthenticated, login, logout } = useMsal();\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"container\">\r\n                <Link to=\"/\"><img src={appState.baseUrl + \"images/\" + appState.skin + \"/moo@2x.png\"} alt={appState.appName} className=\"desktop\" width=\"76\" height=\"111\" /><img src={appState.baseUrl + \"images/\" + appState.skin + \"/moo-small@2x.png\"} alt={appState.appName} className=\"img mobile\" width=\"99\" height=\"32\" /></Link>\r\n            </div>\r\n            <nav>\r\n                <ul>\r\n                    { !isAuthenticated && <li><a onClick={() => login(\"loginRedirect\")}>Login</a></li> }\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li className=\"desktop\"><Link to=\"/accounts\">Manage Accounts</Link></li>\r\n                    <li className=\"desktop\"><Link to=\"/settings\">Settings</Link></li>\r\n                    {isAuthenticated && <li><button onClick={() => logout() }>Logout</button></li>}\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\ninterface HeaderProps {\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\MSALContext.tsx",["363"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport * as msal from \"@azure/msal-browser\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        getToken: (request: any, method: LoginMethod) => Promise<string>,\r\n        token: string,\r\n    }\r\n}\r\n\r\nconst ua = window.navigator.userAgent;\r\nconst msie = ua.indexOf(\"MSIE \");\r\nconst msie11 = ua.indexOf(\"Trident/\");\r\nconst msedge = ua.indexOf(\"Edge/\");\r\nconst isIE = msie > 0 || msie11 > 0;\r\nconst isEdge = msedge > 0;\r\n\r\nexport type LoginMethod = \"loginRedirect\" | \"loginPopup\";\r\n\r\nexport interface MsalContextValues {\r\n    isAuthenticated: boolean,\r\n    user: msal.AccountInfo,\r\n    token: string,\r\n    loading: boolean,\r\n    popupOpen: boolean,\r\n    loginError: any,\r\n    login: (method: \"loginRedirect\" | \"loginPopup\") => Promise<void>,\r\n    logout: () => void,\r\n    getToken: (request: any, method: LoginMethod) => Promise<string>,\r\n}\r\n  \r\nexport const msalConfig = {\r\n    auth: {\r\n        clientId: \"045f8afa-70f2-4700-ab75-77ac41b306f7\",\r\n        authority: \"https://login.microsoftonline.com/30efefb9-9034-4e0c-8c69-17f4578f5924\",\r\n    },\r\n    cache: {\r\n        cacheLocation: \"localStorage\", // This configures where your cache will be stored\r\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\r\n    }\r\n};\r\n\r\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\r\nexport const loginRequest = {\r\n    scopes: [\"openid\", \"profile\", \"User.Read\"],\r\n    forceRefresh: false // Set this to \"true\" to skip a cached token and go to the server to get a new token\r\n};\r\n\r\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\r\nexport const apiRequest = {\r\n    scopes: [\"api://bankplus.mclachlan.family/api.read\"],\r\n    forceRefresh: false // Set this to \"true\" to skip a cached token and go to the server to get a new token\r\n};\r\n\r\nexport interface MsalProviderProps {\r\n    children: any,\r\n    config: msal.Configuration,\r\n}\r\n\r\nexport const MsalContext = React.createContext<MsalContextValues | undefined>(undefined);\r\nexport const MsalProvider = ({\r\n    children,\r\n    config,\r\n}:MsalProviderProps) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState<boolean>();\r\n    const [user, setUser] = useState<msal.AccountInfo>();\r\n    const [token, setToken] = useState<string>();\r\n    const [publicClient, setPublicClient] = useState<msal.PublicClientApplication>();\r\n    const [loading, setLoading] = useState(false);\r\n    const [popupOpen, setPopupOpen] = useState(false);\r\n    const [loginError, setLoginError] = useState(false);\r\n\r\n    const getAccount = (pc: msal.PublicClientApplication): msal.AccountInfo => {\r\n        // need to call getAccount here?\r\n        const currentAccounts = pc.getAllAccounts();\r\n        if (currentAccounts === null) {\r\n            console.log(\"No accounts detected\");\r\n            return null;\r\n        }\r\n\r\n        if (currentAccounts.length > 1) {\r\n            // Add choose account code here\r\n            console.log(\"Multiple accounts detected, need to add choose account code.\");\r\n            return currentAccounts[0];\r\n        } else if (currentAccounts.length === 1) {\r\n            return currentAccounts[0];\r\n        }\r\n    }\r\n\r\n    \r\n    if (!publicClient) {\r\n        const pc: msal.PublicClientApplication = new msal.PublicClientApplication(config);\r\n\r\n        pc.handleRedirectPromise().then((response) => \r\n        {\r\n            setLoading(false);\r\n            if (response) {\r\n                setUser(getAccount(pc));\r\n                setIsAuthenticated(true);\r\n                if(response.accessToken) {\r\n                  setToken(response.accessToken);\r\n                }\r\n            } \r\n        }).catch(error => {\r\n            console.log(error);\r\n            setLoginError(error);\r\n        });\r\n\r\n        if (getAccount(pc)) {\r\n            setUser(getAccount(pc));\r\n            setIsAuthenticated(true);\r\n        }\r\n        \r\n        setPublicClient(pc);\r\n    }\r\n\r\n    const login = async (method: LoginMethod) => {\r\n        const signInType = (isIE || isEdge) ? \"loginRedirect\" : method;\r\n        if (signInType === \"loginPopup\") {\r\n            setPopupOpen(true);\r\n\r\n            try {\r\n                await publicClient.loginPopup(loginRequest);\r\n\r\n                if (getAccount(publicClient)) {\r\n                    setUser(getAccount(publicClient));\r\n                    setIsAuthenticated(true);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                setLoginError(error);\r\n            } finally {\r\n                setPopupOpen(false);\r\n            }\r\n        } else if (signInType === \"loginRedirect\") {\r\n            setLoading(true);\r\n\r\n            publicClient.loginRedirect(loginRequest)\r\n        }\r\n    }\r\n\r\n    const logout = () => {\r\n        publicClient.logout();\r\n    }\r\n\r\n    const getTokenPopup = async (request: any) => {\r\n        try {\r\n            request.account = user;\r\n            if (!request.account || request.account === null) return \"No Account\";\r\n\r\n            var token = (await publicClient.acquireTokenSilent(request)).accessToken;\r\n            setToken(token);\r\n            return token;\r\n        } catch (error) {\r\n            try {\r\n                setPopupOpen(true);\r\n                \r\n                const response = await publicClient.acquireTokenPopup(request);\r\n                setToken(response.accessToken);\r\n                return response.accessToken;\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n                setLoginError(error);\r\n            }\r\n            finally {\r\n                setPopupOpen(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const getTokenRedirect = async (request: msal.SilentRequest): Promise<string> => {\r\n        try {\r\n            request.account = user;\r\n            if (!request.account || request.account === null) return \"No Account\";\r\n\r\n            var token = (await publicClient.acquireTokenSilent(request)).accessToken;\r\n            setToken(token);\r\n            return token;\r\n        }\r\n        catch(error) {\r\n               \r\n            try{\r\n                setLoading(true);\r\n                publicClient.acquireTokenRedirect(request);\r\n            }\r\n            catch(error) { \r\n                console.log(error);\r\n                setLoginError(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    const getToken = async (request: any, method: LoginMethod): Promise<string> => {\r\n        const signInType = (isIE || isEdge)? \"loginRedirect\" : method;\r\n        if(signInType === \"loginRedirect\") {\r\n            return await getTokenRedirect(request);\r\n        } else\r\n        {\r\n            return await getTokenPopup(request);\r\n        }\r\n    }\r\n\r\n    window.getToken = getToken;\r\n\r\n    return (\r\n        <MsalContext.Provider\r\n            value={{\r\n                isAuthenticated,\r\n                user,\r\n                token,\r\n                loading,\r\n                popupOpen,\r\n                loginError,\r\n                login,\r\n                logout,\r\n                getToken\r\n            }}\r\n        >\r\n            {children}\r\n        </MsalContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useMsal = () => useContext(MsalContext);\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AppProvider.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Accounts.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\AccountService.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\useApiQuery.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Transactions.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTagRules.ts",[],{"ruleId":"364","replacedBy":"365"},{"ruleId":"366","replacedBy":"367"},{"ruleId":"368","severity":1,"message":"369","line":37,"column":8,"nodeType":"370","endLine":37,"endColumn":10,"suggestions":"371"},{"ruleId":"372","severity":1,"message":"373","line":11,"column":10,"nodeType":"374","messageId":"375","endLine":11,"endColumn":23},{"ruleId":"372","severity":1,"message":"376","line":11,"column":25,"nodeType":"374","messageId":"375","endLine":11,"endColumn":37},{"ruleId":"372","severity":1,"message":"377","line":6,"column":10,"nodeType":"374","messageId":"375","endLine":6,"endColumn":15},{"ruleId":"372","severity":1,"message":"378","line":16,"column":71,"nodeType":"374","messageId":"375","endLine":16,"endColumn":86},{"ruleId":"368","severity":1,"message":"379","line":62,"column":11,"nodeType":"380","endLine":62,"endColumn":54},{"ruleId":"372","severity":1,"message":"381","line":65,"column":12,"nodeType":"374","messageId":"375","endLine":65,"endColumn":20},{"ruleId":"372","severity":1,"message":"382","line":3,"column":10,"nodeType":"374","messageId":"375","endLine":3,"endColumn":21},{"ruleId":"372","severity":1,"message":"377","line":4,"column":10,"nodeType":"374","messageId":"375","endLine":4,"endColumn":15},{"ruleId":"372","severity":1,"message":"383","line":3,"column":17,"nodeType":"374","messageId":"375","endLine":3,"endColumn":26},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"388"},{"ruleId":"368","severity":1,"message":"389","line":14,"column":11,"nodeType":"380","endLine":14,"endColumn":54},{"ruleId":"368","severity":1,"message":"390","line":48,"column":11,"nodeType":"380","endLine":48,"endColumn":54},{"ruleId":"372","severity":1,"message":"391","line":52,"column":11,"nodeType":"374","messageId":"375","endLine":52,"endColumn":20},{"ruleId":"372","severity":1,"message":"392","line":53,"column":11,"nodeType":"374","messageId":"375","endLine":53,"endColumn":23},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"393"},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"394"},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"395"},{"ruleId":"372","severity":1,"message":"396","line":1,"column":10,"nodeType":"374","messageId":"375","endLine":1,"endColumn":18},{"ruleId":"372","severity":1,"message":"377","line":4,"column":24,"nodeType":"374","messageId":"375","endLine":4,"endColumn":29},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"397"},{"ruleId":"372","severity":1,"message":"398","line":5,"column":10,"nodeType":"374","messageId":"375","endLine":5,"endColumn":28},{"ruleId":"368","severity":1,"message":"399","line":15,"column":11,"nodeType":"380","endLine":15,"endColumn":54},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"400"},{"ruleId":"372","severity":1,"message":"401","line":4,"column":10,"nodeType":"374","messageId":"375","endLine":4,"endColumn":21},{"ruleId":"368","severity":1,"message":"389","line":14,"column":11,"nodeType":"380","endLine":14,"endColumn":54},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"402"},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"403"},{"ruleId":"368","severity":1,"message":"404","line":19,"column":8,"nodeType":"370","endLine":19,"endColumn":43,"suggestions":"405"},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"406"},{"ruleId":"372","severity":1,"message":"407","line":3,"column":8,"nodeType":"374","messageId":"375","endLine":3,"endColumn":18},{"ruleId":"372","severity":1,"message":"408","line":1,"column":10,"nodeType":"374","messageId":"375","endLine":1,"endColumn":23},{"ruleId":"372","severity":1,"message":"409","line":2,"column":10,"nodeType":"374","messageId":"375","endLine":2,"endColumn":21},{"ruleId":"372","severity":1,"message":"407","line":3,"column":8,"nodeType":"374","messageId":"375","endLine":3,"endColumn":18},{"ruleId":"372","severity":1,"message":"410","line":17,"column":11,"nodeType":"374","messageId":"375","endLine":17,"endColumn":29},{"ruleId":"372","severity":1,"message":"411","line":2,"column":10,"nodeType":"374","messageId":"375","endLine":2,"endColumn":17},{"ruleId":"372","severity":1,"message":"412","line":4,"column":10,"nodeType":"374","messageId":"375","endLine":4,"endColumn":20},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"413"},{"ruleId":"364","replacedBy":"414"},{"ruleId":"366","replacedBy":"415"},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"416"},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"417"},{"ruleId":"372","severity":1,"message":"418","line":9,"column":25,"nodeType":"374","messageId":"375","endLine":9,"endColumn":37},{"ruleId":"372","severity":1,"message":"419","line":9,"column":55,"nodeType":"374","messageId":"375","endLine":9,"endColumn":71},{"ruleId":"372","severity":1,"message":"420","line":9,"column":87,"nodeType":"374","messageId":"375","endLine":9,"endColumn":101},{"ruleId":"372","severity":1,"message":"421","line":9,"column":118,"nodeType":"374","messageId":"375","endLine":9,"endColumn":133},{"ruleId":"372","severity":1,"message":"422","line":9,"column":144,"nodeType":"374","messageId":"375","endLine":9,"endColumn":153},{"ruleId":"368","severity":1,"message":"423","line":10,"column":8,"nodeType":"370","endLine":10,"endColumn":15,"suggestions":"424"},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"425"},{"ruleId":"384","severity":1,"message":"385","line":1,"column":1,"nodeType":"386","messageId":"387","fix":"426"},{"ruleId":"372","severity":1,"message":"427","line":10,"column":13,"nodeType":"374","messageId":"375","endLine":10,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":19,"column":47,"nodeType":"430","endLine":19,"endColumn":89},{"ruleId":"372","severity":1,"message":"383","line":1,"column":27,"nodeType":"374","messageId":"375","endLine":1,"endColumn":36},"no-native-reassign",["431"],"no-negated-in-lhs",["432"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getToken'. Either include it or remove the dependency array.","ArrayExpression",["433"],"@typescript-eslint/no-unused-vars","'BsPrefixProps' is defined but never used.","Identifier","unusedVar","'ReplaceProps' is defined but never used.","'State' is defined but never used.","'useTransactions' is defined but never used.","The 'fullTagsList' logical expression could make the dependencies of useEffect Hook (at line 73) change on every render. To fix this, wrap the initialization of 'fullTagsList' in its own useMemo() Hook.","VariableDeclarator","'tagsList' is assigned a value but never used.","'useSelector' is defined but never used.","'useEffect' is defined but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"434","text":"435"},"The 'fullTagsList' logical expression could make the dependencies of useEffect Hook (at line 20) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'fullTagsList' in its own useMemo() Hook.","The 'fullTagsList' logical expression could make the dependencies of useEffect Hook (at line 61) change on every render. To fix this, wrap the initialization of 'fullTagsList' in its own useMemo() Hook.","'addSubTag' is assigned a value but never used.","'removeSubTag' is assigned a value but never used.",{"range":"436","text":"435"},{"range":"437","text":"435"},{"range":"438","text":"435"},"'Dispatch' is defined but never used.",{"range":"439","text":"435"},"'bindActionCreators' is defined but never used.","The 'fullTagsList' logical expression could make the dependencies of useEffect Hook (at line 21) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'fullTagsList' in its own useMemo() Hook.",{"range":"440","text":"435"},"'Transaction' is defined but never used.",{"range":"441","text":"435"},{"range":"442","text":"435"},"React Hook useEffect has a missing dependency: 'props.tag.id'. Either include it or remove the dependency array. If 'setTagsList' needs the current value of 'props.tag.id', you can also switch to useReducer instead of useState and read 'props.tag.id' in the reducer.",["443"],{"range":"444","text":"435"},"'HttpClient' is defined but never used.","'AxiosResponse' is defined but never used.","'ServiceBase' is defined but never used.","'virtualAccountRows' is assigned a value but never used.","'request' is defined but never used.","'apiRequest' is defined but never used.",{"range":"445","text":"435"},["431"],["432"],{"range":"446","text":"435"},{"range":"447","text":"435"},"'avBalanceRef' is assigned a value but never used.","'editingAvBalance' is assigned a value but never used.","'avBalanceClick' is assigned a value but never used.","'avBalanceChange' is assigned a value but never used.","'avBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'appName'. Either include it or remove the dependency array.",["448"],{"range":"449","text":"435"},{"range":"450","text":"435"},"'loading' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"451","fix":"452"},[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],{"desc":"453","fix":"454"},[-1,0],[-1,0],[-1,0],[-1,0],{"desc":"455","fix":"456"},[-1,0],[-1,0],"Update the dependencies array to be: [getToken]",{"range":"457","text":"458"},"Update the dependencies array to be: [transactionRow.tags, fullTagsList, props.tag.id]",{"range":"459","text":"460"},"Update the dependencies array to be: [appName, title]",{"range":"461","text":"462"},[1285,1287],"[getToken]",[784,819],"[transactionRow.tags, fullTagsList, props.tag.id]",[246,253],"[appName, title]"]