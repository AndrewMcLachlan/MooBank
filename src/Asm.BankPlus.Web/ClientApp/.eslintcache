[{"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\index.tsx":"1","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\serviceWorker.ts":"2","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\App.tsx":"3","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\index.ts":"4","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\ManageAccounts.tsx":"5","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\Import.tsx":"6","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\createAccount\\CreateAccount.tsx":"7","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\Home\\Home.tsx":"8","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\Transactions.tsx":"9","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTagRules\\TransactionTagRules.tsx":"10","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\settings\\index.ts":"11","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\index.ts":"12","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\extensions.ts":"13","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\TransactionTagRules.ts":"14","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\TransactionTags.ts":"15","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\createAccount\\ImportSettings.tsx":"16","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionList.tsx":"17","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTagRules\\TransactionTagRuleRow.tsx":"18","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\ClickableIcon.tsx":"19","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\settings\\Settings.tsx":"20","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\TransactionTags.tsx":"21","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\index.ts":"22","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\index.ts":"23","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\App.ts":"24","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Accounts.ts":"25","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Transactions.ts":"26","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionRow.tsx":"27","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionRowIng.tsx":"28","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\TagPanel.tsx":"29","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTagRule.ts":"30","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTag.ts":"31","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Transaction.ts":"32","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\ImporterType.ts":"33","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Account.ts":"34","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\index.ts":"35","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\TransactionTagRow.tsx":"36","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\Upload.tsx":"37","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\PageHeader.tsx":"38","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\ComboBox.tsx":"39","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\CloseBadge.tsx":"40","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\index.ts":"41","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountSummary.tsx":"42","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountBalance.tsx":"43","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionTagRuleService.ts":"44","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionService.ts":"45","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionTagService.ts":"46","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ReferenceDataService.ts":"47","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ImportService.ts":"48","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\AccountList.tsx":"49","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\HttpClient.ts":"50","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ServiceBase.ts":"51","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\Alert.tsx":"52","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\VirtualAccountRow.tsx":"53","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\AccountRow.tsx":"54","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\ManualAccountRow.tsx":"55","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\index.ts":"56","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\clickAway.ts":"57","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\pageTitle.ts":"58","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\helpers\\index.ts":"59","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\helpers\\renderingHelpers.ts":"60","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\configureStore.ts":"61","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\ReferenceData.ts":"62","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Layout.tsx":"63","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Security.ts":"64","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Footer.tsx":"65","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Header.tsx":"66","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\MSALContext.tsx":"67","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AppProvider.tsx":"68","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Accounts.ts":"69","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\AccountService.ts":"70"},{"size":847,"mtime":1608514617716,"results":"71","hashOfConfig":"72"},{"size":5222,"mtime":1566246575692,"results":"73","hashOfConfig":"72"},{"size":4036,"mtime":1608514312563,"results":"74","hashOfConfig":"72"},{"size":309,"mtime":1572091479221,"results":"75","hashOfConfig":"72"},{"size":64,"mtime":1566418604182,"results":"76","hashOfConfig":"72"},{"size":1022,"mtime":1608514455931,"results":"77","hashOfConfig":"72"},{"size":4820,"mtime":1608435015644,"results":"78","hashOfConfig":"72"},{"size":236,"mtime":1608435009959,"results":"79","hashOfConfig":"72"},{"size":764,"mtime":1608514081447,"results":"80","hashOfConfig":"72"},{"size":4591,"mtime":1608514386630,"results":"81","hashOfConfig":"72"},{"size":29,"mtime":1572091400242,"results":"82","hashOfConfig":"72"},{"size":36,"mtime":1572091445404,"results":"83","hashOfConfig":"72"},{"size":393,"mtime":1572070018897,"results":"84","hashOfConfig":"72"},{"size":6067,"mtime":1579422571207,"results":"85","hashOfConfig":"72"},{"size":5282,"mtime":1608435136258,"results":"86","hashOfConfig":"72"},{"size":1194,"mtime":1608435166030,"results":"87","hashOfConfig":"72"},{"size":3989,"mtime":1608514373236,"results":"88","hashOfConfig":"72"},{"size":2628,"mtime":1608434995949,"results":"89","hashOfConfig":"72"},{"size":450,"mtime":1571521196288,"results":"90","hashOfConfig":"72"},{"size":221,"mtime":1572090131652,"results":"91","hashOfConfig":"72"},{"size":3465,"mtime":1608434982060,"results":"92","hashOfConfig":"72"},{"size":345,"mtime":1608509312365,"results":"93","hashOfConfig":"72"},{"size":194,"mtime":1608513493283,"results":"94","hashOfConfig":"72"},{"size":790,"mtime":1608511890840,"results":"95","hashOfConfig":"72"},{"size":2399,"mtime":1608514250232,"results":"96","hashOfConfig":"72"},{"size":5164,"mtime":1608437018129,"results":"97","hashOfConfig":"72"},{"size":2688,"mtime":1572070182442,"results":"98","hashOfConfig":"72"},{"size":2728,"mtime":1572437293702,"results":"99","hashOfConfig":"72"},{"size":1993,"mtime":1608434937225,"results":"100","hashOfConfig":"72"},{"size":148,"mtime":1571141301134,"results":"101","hashOfConfig":"72"},{"size":834,"mtime":1572005278681,"results":"102","hashOfConfig":"72"},{"size":467,"mtime":1573039633530,"results":"103","hashOfConfig":"72"},{"size":70,"mtime":1572046962945,"results":"104","hashOfConfig":"72"},{"size":585,"mtime":1572179394907,"results":"105","hashOfConfig":"72"},{"size":235,"mtime":1608514611820,"results":"106","hashOfConfig":"72"},{"size":2654,"mtime":1572091426347,"results":"107","hashOfConfig":"72"},{"size":3348,"mtime":1572679728688,"results":"108","hashOfConfig":"72"},{"size":1334,"mtime":1608512786269,"results":"109","hashOfConfig":"72"},{"size":3849,"mtime":1579422082686,"results":"110","hashOfConfig":"72"},{"size":888,"mtime":1608423660494,"results":"111","hashOfConfig":"72"},{"size":30,"mtime":1571572220006,"results":"112","hashOfConfig":"72"},{"size":1649,"mtime":1608435148104,"results":"113","hashOfConfig":"72"},{"size":369,"mtime":1570912965506,"results":"114","hashOfConfig":"72"},{"size":2838,"mtime":1579171853932,"results":"115","hashOfConfig":"72"},{"size":2112,"mtime":1608512090734,"results":"116","hashOfConfig":"72"},{"size":2146,"mtime":1608435184943,"results":"117","hashOfConfig":"72"},{"size":541,"mtime":1572047106646,"results":"118","hashOfConfig":"72"},{"size":1369,"mtime":1608510994938,"results":"119","hashOfConfig":"72"},{"size":2372,"mtime":1608514334192,"results":"120","hashOfConfig":"72"},{"size":5674,"mtime":1608514604996,"results":"121","hashOfConfig":"72"},{"size":1043,"mtime":1608512114108,"results":"122","hashOfConfig":"72"},{"size":437,"mtime":1570884624749,"results":"123","hashOfConfig":"72"},{"size":1316,"mtime":1608465922472,"results":"124","hashOfConfig":"72"},{"size":2221,"mtime":1572179213279,"results":"125","hashOfConfig":"72"},{"size":2990,"mtime":1608435005811,"results":"126","hashOfConfig":"72"},{"size":60,"mtime":1608514235298,"results":"127","hashOfConfig":"72"},{"size":538,"mtime":1571659541243,"results":"128","hashOfConfig":"72"},{"size":258,"mtime":1608510889280,"results":"129","hashOfConfig":"72"},{"size":35,"mtime":1572176577103,"results":"130","hashOfConfig":"72"},{"size":120,"mtime":1572176566907,"results":"131","hashOfConfig":"72"},{"size":1454,"mtime":1572068197496,"results":"132","hashOfConfig":"72"},{"size":1408,"mtime":1572047246055,"results":"133","hashOfConfig":"72"},{"size":455,"mtime":1571572556359,"results":"134","hashOfConfig":"72"},{"size":732,"mtime":1566618354420,"results":"135","hashOfConfig":"72"},{"size":251,"mtime":1566417716723,"results":"136","hashOfConfig":"72"},{"size":1300,"mtime":1608510941989,"results":"137","hashOfConfig":"72"},{"size":7244,"mtime":1608508559512,"results":"138","hashOfConfig":"72"},{"size":608,"mtime":1608510857825,"results":"139","hashOfConfig":"72"},{"size":113,"mtime":1608513512960,"results":"140","hashOfConfig":"72"},{"size":557,"mtime":1608514075901,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1otw1ip",{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"146"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"146"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"146"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"174","usedDeprecatedRules":"146"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"177","usedDeprecatedRules":"146"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"146"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"185","usedDeprecatedRules":"146"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"198","usedDeprecatedRules":"146"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"201","usedDeprecatedRules":"146"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"204","usedDeprecatedRules":"146"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"207","usedDeprecatedRules":"146"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"210","usedDeprecatedRules":"146"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"219","usedDeprecatedRules":"146"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"228","usedDeprecatedRules":"146"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"237","usedDeprecatedRules":"146"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"146"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"265","usedDeprecatedRules":"266"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"269","usedDeprecatedRules":"146"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"272","usedDeprecatedRules":"146"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"146"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"294","usedDeprecatedRules":"146"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"297","usedDeprecatedRules":"146"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"146"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"146"},"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\index.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\serviceWorker.ts",[],["308","309"],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\App.tsx",["310"],"import \"./App.scss\";\n\nimport React, { useEffect } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport { Layout } from \"./layouts/Layout\";\nimport * as Pages from \"./pages\";\n\nimport { initialState as accountsInitialState } from \"./store/Accounts\";\nimport configureStore from \"./store/configureStore\";\nimport { State } from \"./store/state\";\nimport { initialState as appInitialState } from \"./store/App\";\nimport { initialState as tagsInitialState, actionCreators as tagActionCreators } from \"./store/TransactionTags\";\nimport { initialState as refDataInitialState, actionCreators as refDataActionCreators } from \"./store/ReferenceData\";\nimport { initialState as rulesInitialState } from \"./store/TransactionTagRules\";\nimport { apiRequest, AppProvider, useMsal } from \"./components\";\nimport { createHttpClient, httpClient } from \"./services/HttpClient\";\n\nconst App: React.FC = () => {\n\n    const baseUrl = \"/\"; //document.getElementsByTagName(\"base\")[0].getAttribute(\"href\");\n\n    const initialState: State = {\n        app: appInitialState,\n        accounts: accountsInitialState,\n        transactionTags: tagsInitialState,\n        transactionTagRules: rulesInitialState,\n        referenceData: refDataInitialState,\n    };\n\n    const { isAuthenticated, getToken } = useMsal();\n\n    useEffect(() => {\n        createHttpClient(baseUrl);\n        httpClient.interceptors.request.use(async (request) => {\n            request.headers = {\n                \"Authorization\": `Bearer ${await getToken(apiRequest, \"loginRedirect\")}`\n            };\n            return request;\n        })\n    }, []);\n\n    if (isAuthenticated) {\n        getToken(apiRequest, \"loginRedirect\").then((r) => window.token = r);\n    }\n\n    const queryClient = new QueryClient();\n\n    const store = configureStore(window.history, initialState);\n\n    const dispatch: Dispatch<any> = store.dispatch;\n\n    bindActionCreators(tagActionCreators, dispatch);\n    bindActionCreators(refDataActionCreators, dispatch);\n    dispatch(tagActionCreators.requestTags());\n    dispatch(refDataActionCreators.requestImporterTypes());\n    return (\n        <AppProvider appName=\"MooBank\" // Array.from(document.getElementsByTagName(\"meta\")).find((value) => value.getAttribute(\"name\") === \"application-name\").getAttribute(\"content\"),\n            baseUrl={baseUrl} //document.getElementsByTagName(\"base\")[0].getAttribute(\"href\"),\n            skin=\"moobank\" // Array.from(document.getElementsByTagName(\"meta\")).find((value) => value.getAttribute(\"name\") === \"skin\").getAttribute(\"content\"),\n        >\n            <QueryClientProvider client={queryClient}>\n                <ReduxProvider store={store}>\n                    <BrowserRouter basename={baseUrl.replace(/^.*\\/\\/[^/]+/, \"\")}>\n                        <Layout>\n                            {isAuthenticated && <Switch>\n                                <Route exact={true} path=\"/\" component={Pages.Home} />\n                                <Route exact path=\"/accounts\" component={Pages.CreateAccount} />\n                                <Route path=\"/accounts/create\" component={Pages.CreateAccount} />\n                                <Route exact path=\"/accounts/:id\" component={Pages.Transactions} />\n                                <Route path=\"/accounts/:id/tag-rules\" component={Pages.TransactionTagRules} />\n                                <Route path=\"/accounts/:id/import\" component={Pages.Import} />\n                                <Route exact path=\"/settings\" component={Pages.TransactionTags} />\n                                <Route path=\"/settings/tags\" component={Pages.TransactionTags} />\n                            </Switch>}\n                        </Layout>\n                    </BrowserRouter>\n                </ ReduxProvider>\n            </QueryClientProvider>\n        </AppProvider>\n    );\n};\n\nexport default App;\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\ManageAccounts.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\Import.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\createAccount\\CreateAccount.tsx",["311","312"],"import React, { useState } from \"react\";\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { AccountType, AccountController, ImportAccount } from \"../../models\";\r\nimport { toNameValue } from \"../../extensions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { actionCreators } from \"../../store/Accounts\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nimport { ImportSettings } from \"./ImportSettings\";\r\nimport { BsPrefixProps, ReplaceProps } from \"react-bootstrap/helpers\";\r\nimport { usePageTitle } from \"../../hooks\";\r\n\r\nexport const CreateAccount: React.FC = () => {\r\n\r\n    usePageTitle(\"Create Account\");\r\n\r\n    const dispatch = useDispatch();\r\n    bindActionCreators(actionCreators, dispatch);\r\n\r\n    const accountTypes = toNameValue(AccountType);\r\n\r\n    const accountControllers = toNameValue(AccountController);\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [balance, setBalance] = useState(0);\r\n    const [accountType, setAccountType] = useState(AccountType.Transaction);\r\n    const [accountController, setAccountController] = useState(AccountController.Manual);\r\n    const [importerTypeId, setImporterTypeId] = useState(0);\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        const importAccount: ImportAccount = accountController === AccountController.Import ? { importerTypeId: importerTypeId } : null;\r\n\r\n        dispatch(actionCreators.createAccount({\r\n            id: null,\r\n            name: name,\r\n            description: description,\r\n            availableBalance: balance,\r\n            currentBalance: balance,\r\n            accountType: accountType,\r\n            controller: accountController,\r\n            balanceUpdated: new Date(),\r\n            includeInPosition: true,\r\n        }, importAccount));\r\n\r\n        setSubmitted(true);\r\n    }\r\n\r\n    if (submitted) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Create Account</h1>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"AccountName\" >\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control type=\"text\" required maxLength={50} value={name} onChange={(e: any) => setName(e.currentTarget.value)} />\r\n                    <Form.Control.Feedback type=\"invalid\">Please enter a name</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"AccountDescription\" >\r\n                    <Form.Label >Description</Form.Label>\r\n                    <Form.Control type=\"text\" as=\"textarea\" required maxLength={255} value={description} onChange={(e: any) => setDescription(e.currentTarget.value)} />\r\n                    <Form.Control.Feedback type=\"invalid\">Please enter a description</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"OpeningBalance\" >\r\n                    <Form.Label>Opening Balance</Form.Label>\r\n                    <InputGroup>\r\n                        <InputGroup.Prepend>$</InputGroup.Prepend>\r\n                        <Form.Control type=\"number\" required value={balance.toString()} onChange={(e: any) => setBalance(e.currentTarget.value)} />\r\n                    </InputGroup>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"AccountType\" >\r\n                    <Form.Label>Type</Form.Label>\r\n                    <Form.Control as=\"select\" value={accountType.toString()} onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setAccountType(parseInt(e.currentTarget.value))}>\r\n                        {accountTypes.map(a =>\r\n                            <option value={a.value} key={a.value}>{a.name}</option>\r\n                        )}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"AccountController\">\r\n                    <Form.Label>Controller</Form.Label>\r\n                    <Form.Control as=\"select\" value={accountController.toString()} onChange={(e: any) => setAccountController(parseInt(e.currentTarget.value))}>\r\n                        {accountControllers.map(a =>\r\n                            <option value={a.value} key={a.value}>{a.name}</option>\r\n                        )}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <ImportSettings show={accountController === AccountController.Import} selectedId={importerTypeId} onChange={(e) => setImporterTypeId(e)} />\r\n                <Button type=\"submit\" variant=\"primary\">Create</Button>\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n\r\nCreateAccount.displayName = \"CreateAccount\";","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\Home\\Home.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\Transactions.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTagRules\\TransactionTagRules.tsx",["313"],"import \"./TransactionTagRules.scss\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport { State } from \"../../store/state\";\r\nimport { actionCreators } from \"../../store/TransactionTagRules\";\r\nimport { actionCreators as tagActionCreators } from \"../../store/TransactionTags\";\r\n\r\nimport { TagPanel, PageHeader } from \"../../components\";\r\n\r\nimport { TransactionTag, TransactionTagRule } from \"../../models\";\r\nimport { RouteComponentProps, useParams } from \"react-router\";\r\nimport { usePageTitle } from \"../../hooks\";\r\n\r\nimport { TransactionTagRuleRow } from \"./TransactionTagRuleRow\";\r\nimport { ClickableIcon } from \"../../components/ClickableIcon\";\r\nimport { useAccount } from \"../../services\";\r\n\r\nexport const TransactionTagRules: React.FC<TransactionTagRuleProps> = (props) => {\r\n\r\n    usePageTitle(\"Transaction Tag Rules\");\r\n\r\n    const { newRule, fullTagsList, addTag, createTag, removeTag, nameChange, createRule, runRules } = useComponentState(props);\r\n\r\n    const rules = useSelector((state: State) => state.transactionTagRules.rules);\r\n\r\n    return (\r\n        <>\r\n             <PageHeader title=\"Transaction Tag Rules\" menuItems={[\r\n                 { text: \"Run Rules Now\", onClick: runRules }\r\n             ]} />\r\n            <Table striped bordered={false} borderless className=\"transaction-tag-rules\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>When a transaction contains</th>\r\n                        <th>Apply tag(s)</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td><input type=\"text\" placeholder=\"Transaction description contains...\" value={newRule.contains} onChange={nameChange} /></td>\r\n                        <TagPanel as=\"td\" selectedItems={newRule.tags} allItems={fullTagsList} textField=\"name\" valueField=\"id\" onAdd={addTag} onCreate={createTag} onRemove={removeTag} allowCreate={false} alwaysShowEditPanel={true} />\r\n                        <td><span onClick={createRule}><ClickableIcon icon=\"check-circle\" title=\"Save\" /></span></td>\r\n                    </tr>\r\n                    {rules && rules.map((r) => <TransactionTagRuleRow key={r.id} rule={r} />)}\r\n                </tbody>\r\n            </Table>\r\n        </>\r\n    );\r\n}\r\n\r\nTransactionTagRules.displayName = \"TransactionTagRules\";\r\n\r\nconst useComponentState = (props: TransactionTagRuleProps) => {\r\n\r\n    var dispatch = useDispatch();\r\n\r\n    const blankRule = { id: 0, contains: \"\", tags: [] } as TransactionTagRule;\r\n\r\n    const { id } = useParams<any>();\r\n    const account = useAccount(id);\r\n\r\n    const fullTagsList = useSelector((state: State) => state.transactionTags.tags);\r\n\r\n    const [newRule, setNewRule] = useState(blankRule);\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    bindActionCreators(actionCreators, dispatch);\r\n    bindActionCreators(tagActionCreators, dispatch);\r\n\r\n    useEffect(() => {\r\n        dispatch(actionCreators.requestRules());\r\n    }, [account, dispatch]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !newRule.tags.some((tt) => t.id === tt.id)));\r\n    }, [newRule.tags, fullTagsList]);\r\n\r\n    const createRule = () => {\r\n        dispatch(actionCreators.createRule(newRule));\r\n\r\n        setNewRule(blankRule);\r\n    }\r\n\r\n    const nameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewRule({ ...newRule, contains: e.currentTarget.value });\r\n    }\r\n\r\n    const createTag = (name: string) => {\r\n        dispatch(tagActionCreators.createTag(name));\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        //dispatch(actionCreators.addTransactionTag(props.transaction.id, tag.id));\r\n        //setTags(tags.concat([tag]));\r\n        newRule.tags.push(tag);\r\n        setNewRule(newRule);\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        newRule.tags = newRule.tags.filter((t) => t.id !== tag.id);\r\n        setNewRule(newRule);\r\n    };\r\n\r\n    const runRules = () => {\r\n        dispatch(actionCreators.runRules());\r\n    };\r\n\r\n    return {\r\n        newRule,\r\n        fullTagsList,\r\n\r\n        createTag,\r\n        addTag,\r\n        removeTag,\r\n\r\n        nameChange,\r\n        createRule,\r\n\r\n        runRules,\r\n    };\r\n}\r\n\r\nexport interface TransactionTagRuleProps extends RouteComponentProps<{ id: string }> {\r\n\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\settings\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\extensions.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\TransactionTagRules.ts",["314"],"﻿import { Dispatch } from \"redux\";\r\n\r\nimport * as Models from \"../models\";\r\nimport { ActionWithData } from \"./redux-extensions\";\r\nimport { TransactionTagRules, State } from \"./state\";\r\nimport { TransactionTagService, TransactionTagRuleService } from \"../services\";\r\nimport { ShowMessage } from \"./App\";\r\n\r\nconst RequestRules = \"RequestRules\";\r\nconst ReceiveRules = \"ReceiveRules\";\r\nconst CreateRule = \"CreateTransactionTagRule\";\r\nconst DeleteRule= \"DeleteTransactionTagRule\";\r\nconst AddTransactionTag = \"RuleAddTransactionTag\";\r\nconst RemoveTransactionTag = \"RuleRemoveTransactionTag\";\r\n\r\nexport const initialState: TransactionTagRules = {\r\n    rules: [],\r\n    areLoading: false,\r\n};\r\n\r\nexport const actionCreators = {\r\n    requestRules: () => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const state = getState();\r\n\r\n        if (!state.accounts.selectedAccount) return;\r\n\r\n        if (state.transactionTagRules.areLoading) {\r\n            // Don't issue a duplicate request (we already have or are loading the requested data)\r\n            return;\r\n        }\r\n\r\n        dispatch({ type: RequestRules });\r\n\r\n        const service = new TransactionTagRuleService(state);\r\n\r\n        try {\r\n            const rules = await service.getRules(state.accounts.selectedAccount.id);\r\n            dispatch({ type: ReceiveRules, data: rules.rules });\r\n        }\r\n        catch (error) {\r\n            console.error(error.message);\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n            dispatch({ type: ReceiveRules, data: [] });\r\n        }\r\n    },\r\n\r\n    createRule: (rule: Models.TransactionTagRule) => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const state = getState();\r\n\r\n        const service = new TransactionTagRuleService(state);\r\n\r\n        try {\r\n            const newRule = await service.createRule(state.accounts.selectedAccount.id, rule);\r\n            dispatch({ type: CreateRule, data: newRule });\r\n        }\r\n        catch (error) {\r\n            console.error(error.message);\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n\r\n    deleteRule: (rule: Models.TransactionTagRule) => async (dispatch: Dispatch, getState: () => State) => {\r\n        const state = getState();\r\n\r\n        const service = new TransactionTagRuleService(state);\r\n\r\n        try {\r\n            await service.deleteRule(state.accounts.selectedAccount.id, rule.id);\r\n            dispatch({ type: DeleteRule, data: rule });\r\n        }\r\n        catch (error) {\r\n            console.error(error.message);\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n\r\n    addTransactionTag: (ruleId: number, tagId: number) => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const state = getState();\r\n\r\n        const service = new TransactionTagRuleService(state);\r\n\r\n        try {\r\n            const transaction = await service.addTransactionTag(state.accounts.selectedAccount.id, ruleId, tagId);\r\n            dispatch({ type: AddTransactionTag, data: transaction });\r\n        }\r\n        catch (error) {\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n\r\n    removeTransactionTag: (ruleId: number, tagId: number) => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const state = getState();\r\n\r\n        const service = new TransactionTagRuleService(state);\r\n\r\n        try {\r\n            const transaction = await service.removeTransactionTag(state.accounts.selectedAccount.id, ruleId, tagId);\r\n            dispatch({ type: RemoveTransactionTag, data: transaction });\r\n        }\r\n        catch (error) {\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n\r\n    createTagAndAdd: (ruleId: number, tagName: string) => async (dispatch: Dispatch, getState: () => State) => {\r\n        const state = getState();\r\n\r\n        const transactionTagService = new TransactionTagService(state);\r\n\r\n        const tag = await transactionTagService.createTag(tagName, []);\r\n\r\n        const service = new TransactionTagRuleService(state);\r\n\r\n        try {\r\n            const transaction = await service.addTransactionTag(state.accounts.selectedAccount.id, ruleId, tag.id);\r\n            dispatch({ type: AddTransactionTag, data: transaction });\r\n        }\r\n        catch (error) {\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n\r\n    runRules: () => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const state = getState();\r\n\r\n        const service = new TransactionTagRuleService(state);\r\n\r\n        try {\r\n            await service.runRules(state.accounts.selectedAccount.id);\r\n        }\r\n        catch (error) {\r\n            console.error(error.message);\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n};\r\n\r\nexport const reducer = (state: TransactionTagRules = initialState, action: ActionWithData<Models.TransactionTagRule[] | Models.TransactionTagRule>): TransactionTagRules => {\r\n\r\n    switch (action.type) {\r\n        case RequestRules:\r\n            return {\r\n                ...state,\r\n                areLoading: true,\r\n            };\r\n\r\n\r\n        case ReceiveRules:\r\n\r\n            return {\r\n                ...state,\r\n                rules: (action.data as Models.TransactionTagRule[]).sort((t1, t2) => t1.contains.localeCompare(t2.contains)),\r\n                areLoading: false,\r\n            };\r\n\r\n        case CreateRule:\r\n            const newRules = [ ...state.rules, (action.data as Models.TransactionTagRule)];\r\n            newRules.sort((t1, t2) => t1.contains.localeCompare(t2.contains));\r\n            return {\r\n                ...state,\r\n                rules: newRules,\r\n            };\r\n\r\n        case DeleteRule:\r\n            state.rules = state.rules.filter(r => r.id !== (action.data as Models.TransactionTagRule).id)\r\n            state.rules.sort((t1, t2) => t1.contains.localeCompare(t2.contains));\r\n            return state;\r\n    }\r\n    return state;\r\n};\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\TransactionTags.ts",["315"],"﻿import { Dispatch } from \"redux\";\r\n\r\nimport * as Models from \"../models\";\r\nimport { ActionWithData } from \"./redux-extensions\";\r\nimport { TransactionTags, State } from \"./state\";\r\nimport { TransactionTagService } from \"../services/TransactionTagService\";\r\nimport { ShowMessage } from \"./App\";\r\n\r\nconst RequestTags = \"RequestTags\";\r\nconst ReceiveTags = \"ReceiveTags\";\r\nconst CreateTag = \"CreateTransactionTag\";\r\nconst DeleteTag = \"DeleteTransactionTag\";\r\nconst AddTransactionTag = \"TagAddTransactionTag\";\r\nconst RemoveTransactionTag = \"TagRemoveTransactionTag\";\r\n\r\nexport const initialState: TransactionTags = {\r\n    tags: [],\r\n    areLoading: false,\r\n};\r\n\r\nexport const actionCreators = {\r\n    requestTags: () => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const state = getState();\r\n\r\n        if (state.transactionTags.areLoading) {\r\n            // Don't issue a duplicate request (we already have or are loading the requested data)\r\n            return;\r\n        }\r\n\r\n        dispatch({ type: RequestTags });\r\n\r\n        const service = new TransactionTagService(state);\r\n\r\n        try {\r\n            const tags = await service.getTags();\r\n            dispatch({ type: ReceiveTags, data: tags });\r\n        }\r\n        catch (error) {\r\n            console.error(error.message);\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n            dispatch({ type: ReceiveTags, data: [] });\r\n        }\r\n    },\r\n\r\n    createTag: (newTag: string | Models.TransactionTag) => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const service = new TransactionTagService(getState());\r\n\r\n        const name = ((newTag as Models.TransactionTag).name || (newTag as string)).trim();\r\n\r\n        const tags = (newTag as Models.TransactionTag).tags || [];\r\n\r\n        try {\r\n            const tag = await service.createTag(name, tags);\r\n            dispatch({ type: CreateTag, data: tag });\r\n        }\r\n        catch (error) {\r\n            console.error(error.message);\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n\r\n    deleteTag: (tag: Models.TransactionTag) => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const service = new TransactionTagService(getState());\r\n\r\n        try {\r\n            await service.deleteTag(tag);\r\n            dispatch({ type: DeleteTag, data: tag });\r\n        }\r\n        catch (error) {\r\n            console.error(error.message);\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n\r\n    addTransactionTag: (tagId: number, subId: number) => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const state = getState();\r\n\r\n        const service = new TransactionTagService(state);\r\n\r\n        try {\r\n            const transaction = await service.addTransactionTag(tagId, subId);\r\n            dispatch({ type: AddTransactionTag, data: transaction });\r\n        }\r\n        catch (error) {\r\n            console.error(error.message);\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n\r\n    removeTransactionTag: (tagId: number, subId: number) => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const service = new TransactionTagService(getState());\r\n\r\n        try {\r\n            const transaction = await service.removeTransactionTag(tagId, subId);\r\n            dispatch({ type: RemoveTransactionTag, data: transaction });\r\n        }\r\n        catch (error) {\r\n            console.error(error.message);\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n\r\n    createTagAndAdd: (tagId: number, tagName: string) => async (dispatch: Dispatch, getState: () => State) => {\r\n        const state = getState();\r\n\r\n        const service = new TransactionTagService(state);\r\n\r\n        const tag = await service.createTag(tagName, []);\r\n\r\n        try {\r\n            const transaction = await service.addTransactionTag(tagId, tag.id);\r\n            dispatch({ type: AddTransactionTag, data: transaction });\r\n        }\r\n        catch (error) {\r\n            console.error(error.message);\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n};\r\n\r\nexport const reducer = (state: TransactionTags = initialState, action: ActionWithData<Models.TransactionTag[] | Models.TransactionTag>): TransactionTags => {\r\n\r\n    switch (action.type) {\r\n        case RequestTags:\r\n            return {\r\n                ...state,\r\n                areLoading: true,\r\n            };\r\n\r\n\r\n        case ReceiveTags:\r\n\r\n            return {\r\n                ...state,\r\n                tags: (action.data as Models.TransactionTag[]).sort((t1, t2) => t1.name.localeCompare(t2.name)),\r\n                areLoading: false,\r\n            };\r\n\r\n        case CreateTag:\r\n            state.tags = [ ...state.tags, action.data as Models.TransactionTag];\r\n            state.tags = state.tags.sort((t1, t2) => t1.name.localeCompare(t2.name));\r\n            return state;\r\n\r\n        case DeleteTag:\r\n            state.tags = state.tags.filter(r => r.id !== (action.data as Models.TransactionTag).id)\r\n            state.tags = state.tags.sort((t1, t2) => t1.name.localeCompare(t2.name));\r\n            return state;\r\n    }\r\n    return state;\r\n};\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\createAccount\\ImportSettings.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionList.tsx",["316"],"import \"./TransactionList.scss\";\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport { actionCreators as accountActionCreators } from \"../../store/Accounts\";\r\nimport { actionCreators as transactionActionCreators, SetTransactionListFilter } from \"../../store/Transactions\";\r\nimport { State } from \"../../store/state\";\r\nimport { Account } from \"../../models\";\r\nimport { TransactionRow } from \"./TransactionRow\";\r\nimport { TransactionRowIng } from \"./TransactionRowIng\";\r\nimport { useTransactions } from \"../../services\";\r\nimport { useParams } from \"react-router\";\r\n\r\nexport const TransactionList: React.FC<TransactionListProps> = (props) => {\r\n\r\n    const { id } = useParams<any>();\r\n\r\n    const pageNumber = useSelector((state: State) => state.transactions.currentPage);\r\n    const totalTransactions = useSelector((state: State) => state.transactions.total);\r\n    const pageSize = useSelector((state: State) => state.transactions.pageSize);\r\n    const filterTagged = useSelector((state: State) => state.transactions.filterTagged);\r\n    const dispatch = useDispatch();\r\n\r\n    const transactionsQuery = useTransactions(id, filterTagged, pageSize, pageNumber);\r\n    const transactions = transactionsQuery.data?.transactions;\r\n\r\n    bindActionCreators(accountActionCreators, dispatch);\r\n    bindActionCreators(transactionActionCreators, dispatch);\r\n\r\n    useEffect(() => {\r\n        props.account && dispatch(transactionActionCreators.requestTransactions(props.account.id, pageNumber));\r\n    }, [dispatch, props.account, filterTagged]);\r\n\r\n    const numberOfPages = Math.ceil(totalTransactions / pageSize);\r\n \r\n    const showNext = pageNumber < numberOfPages;\r\n    const showPrev = pageNumber > 1;\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"filter-panel\">\r\n                <input id=\"filter-tagged\" type=\"checkbox\" onChange={(e) => dispatch({  type: SetTransactionListFilter, data: e.currentTarget.checked})} />\r\n                <label htmlFor=\"filter-tagged\">Only show transactions without tags</label>\r\n            </div>\r\n            <Table striped bordered={false} borderless className=\"transactions\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Date</th>\r\n                        <th>Description</th>\r\n                        <th>Amount</th>\r\n                        <th>Tags</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {transactions && transactions.map((t) => t.extraInfo ? <TransactionRowIng key={t.id} transaction={t} /> : <TransactionRow key={t.id} transaction={t} />)}\r\n                </tbody>\r\n                <tfoot>\r\n                    <tr>\r\n                        <td colSpan={2}>Page {pageNumber} of {numberOfPages} ({totalTransactions} transactions)</td>\r\n                        <td colSpan={2}>\r\n                            <button disabled={!showPrev} className=\"btn\" onClick={() => dispatch(transactionActionCreators.requestTransactions(props.account.id, 1))}>&lt;&lt;</button>\r\n                            <button disabled={!showPrev} className=\"btn\" onClick={() => dispatch(transactionActionCreators.requestTransactions(props.account.id, Math.max(pageNumber - 1, 1)))}>&lt;</button>\r\n                            <button disabled={!showNext} className=\"btn\" onClick={() => dispatch(transactionActionCreators.requestTransactions(props.account.id, Math.min(pageNumber + 1, numberOfPages)))}>&gt;</button>\r\n                            <button disabled={!showNext} className=\"btn\" onClick={() => dispatch(transactionActionCreators.requestTransactions(props.account.id, numberOfPages))}>&gt;&gt;</button>\r\n                        </td>\r\n                    </tr>\r\n                </tfoot>\r\n            </Table>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport interface TransactionListProps {\r\n    account: Account;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTagRules\\TransactionTagRuleRow.tsx",["317"],"﻿import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport { TransactionTagRule, TransactionTag } from \"../../models\";\r\nimport { actionCreators } from \"../../store/TransactionTagRules\";\r\nimport { State } from \"../../store/state\";\r\nimport { TagPanel } from \"../../components/TagPanel\";\r\nimport { ClickableIcon } from \"../../components/ClickableIcon\";\r\n\r\nexport const TransactionTagRuleRow: React.FC<TransactionTagRuleRowProps> = (props) => {\r\n\r\n    const transactionRow = useTransactionTagRuleRowEvents(props);\r\n\r\n    const fullTagsList = useSelector((state: State) => state.transactionTags.tags);\r\n\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !transactionRow.tags.some((tt) => t.id === tt.id)));\r\n    }, [transactionRow.tags, fullTagsList]);\r\n\r\n    return (\r\n        <tr>\r\n            <td>{props.rule.contains}</td>\r\n            <TagPanel as=\"td\" selectedItems={transactionRow.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={transactionRow.addTag} onRemove={transactionRow.removeTag} onCreate={transactionRow.createTag} allowCreate={true} />\r\n            <td><span onClick={transactionRow.deleteRule}><ClickableIcon icon=\"trash-alt\" title=\"Delete\" /></span></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nTransactionTagRuleRow.displayName = \"TransactionTagRuleRow\";\r\n\r\nfunction useTransactionTagRuleRowEvents(props: TransactionTagRuleRowProps) {\r\n\r\n    const dispatch = useDispatch();\r\n    const [tags, setTags] = useState(props.rule.tags);\r\n\r\n    useEffect(() => {\r\n        setTags(props.rule.tags);\r\n    }, [props.rule.tags]);\r\n\r\n    bindActionCreators(actionCreators, dispatch);\r\n\r\n    const deleteRule = () => {\r\n        dispatch(actionCreators.deleteRule(props.rule));\r\n    }\r\n\r\n    const createTag = (name: string) => {\r\n        dispatch(actionCreators.createTagAndAdd(props.rule.id, name));\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        dispatch(actionCreators.addTransactionTag(props.rule.id, tag.id));\r\n        setTags([ ...tags, tag]);\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        dispatch(actionCreators.removeTransactionTag(props.rule.id, tag.id));\r\n        setTags(tags.filter((t) => t.id !== tag.id));\r\n    }\r\n\r\n    return {\r\n        deleteRule,\r\n        createTag,\r\n        addTag,\r\n        removeTag,\r\n        tags,\r\n    };\r\n}\r\n\r\nexport interface TransactionTagRuleRowProps {\r\n    rule: TransactionTagRule;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\ClickableIcon.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\settings\\Settings.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\TransactionTags.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\App.ts",["318"],"﻿import { App } from \"./state\";\r\nimport { ActionWithData } from \"./redux-extensions\";\r\nimport { Dispatch } from \"react\";\r\n\r\nexport const initialState: App = {\r\n    baseUrl: \"/\",\r\n};\r\n\r\nexport const ShowMessage = \"ShowMessage\";\r\n\r\nexport const genericCaller = (dispatch: Dispatch<ActionWithData<string>>, callback: () => any) => {\r\n    try {\r\n        return callback();\r\n    }\r\n    catch (error) {\r\n        dispatch({ type: \"ShowMessage\", data: (error as Error).message});\r\n    }\r\n}\r\n\r\nexport const reducer = (state: App, action:ActionWithData<string>) => {\r\n    state = state || initialState;\r\n\r\n    switch (action.type) {\r\n        case \"ShowMessage\":\r\n            return {\r\n                ...state,\r\n                message: action.data,\r\n            }\r\n    }\r\n\r\n    return state;\r\n};\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Accounts.ts",["319"],"﻿import { Dispatch } from \"redux\";\r\n\r\nimport HttpClient from \"../services/HttpClient\";\r\nimport { ActionWithData } from \"./redux-extensions\";\r\nimport { Accounts, State } from \"./state\";\r\nimport { Account, ImportAccount } from \"../models\";\r\nimport { ImportService } from \"../services\";\r\n\r\nexport const ActionTypes = {\r\n    CreateAccount: \"CreateAccount\",\r\n    AccountCreated: \"AccountCreated\",\r\n    ReceiveAccounts: \"ReceiveAccounts\",\r\n    ReceiveAccount: \"ReceiveAccount\",\r\n    SetSelectedAccount: \"SetSelectedAccount\",\r\n    ImportTransactions: \"ImportTransactions\",\r\n};\r\n\r\nexport const initialState: Accounts = {\r\n    accounts: [],\r\n    areLoading: false,\r\n    virtualAccounts: [],\r\n    selectedAccount: null,\r\n    position: 0,\r\n};\r\n\r\nexport const actionCreators = {\r\n\r\n    createAccount: (account: Account, importAccount: ImportAccount) => async (dispatch: Dispatch, getState: () => State) => {\r\n        const state = getState();\r\n\r\n        dispatch({ type: ActionTypes.CreateAccount });\r\n\r\n        const url = `api/accounts`;\r\n\r\n        const client = new HttpClient(state.app.baseUrl);\r\n\r\n        const newAccount = await client.post<{ account: Account, importAccount: ImportAccount }, Account>(url, { account, importAccount });\r\n\r\n        dispatch({ type: ActionTypes.AccountCreated, data: newAccount })\r\n    },\r\n\r\n    importTransactions: (id: string, file: File) => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const service = new ImportService(getState());\r\n\r\n        await service.importTransactions(id, file);\r\n    },\r\n};\r\n\r\nexport const reducer = (state: Accounts = initialState, action: ActionWithData<any>): Accounts => {\r\n\r\n    switch (action.type) {\r\n        case ActionTypes.ReceiveAccounts:\r\n            return {\r\n                ...state,\r\n                accounts: action.data.accounts,\r\n                areLoading: false,\r\n                virtualAccounts: action.data.virtualAccounts,\r\n                position: action.data.position,\r\n            };\r\n\r\n        case ActionTypes.ReceiveAccount:\r\n        case ActionTypes.SetSelectedAccount:\r\n            return {\r\n                ...state,\r\n                selectedAccount: action.data,\r\n            };\r\n\r\n        case ActionTypes.AccountCreated:\r\n            return {\r\n                ...state,\r\n                accounts: [...state.accounts, action.data],\r\n            }\r\n\r\n\r\n    }\r\n\r\n    return state;\r\n};\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Transactions.ts",["320"],"﻿import { Dispatch } from \"redux\";\r\n\r\nimport { ActionWithData } from \"./redux-extensions\";\r\nimport { Transactions, State } from \"./state\";\r\n\r\nimport { TransactionService, TransactionTagService } from \"../services\";\r\nimport { ShowMessage } from \"./App\";\r\n\r\nconst RequestTransactions = \"RequestTransactions\";\r\nconst ReceiveTransactions = \"ReceiveTransactions\";\r\n\r\nconst AddTransactionTag = \"TransactionAddTransactionTag\";\r\nconst RemoveTransactionTag = \"TransactionRemoveTransactionTag\";\r\n\r\nexport const SetTransactionListFilter = \"SetTransactionListFilter\";\r\n\r\nconst initialState: Transactions = {\r\n    transactions: [],\r\n    areLoading: false,\r\n    currentPage: 1,\r\n    pageSize: 50,\r\n    total: 0,\r\n    filterTagged: false,\r\n};\r\n\r\nexport const actionCreators = {\r\n\r\n    setFilter: (filterTagged: boolean, accountId: string, pageNumber: number) => async (dispatch: Dispatch, getState: () => State) => {\r\n        \r\n        const state = getState();\r\n\r\n        state.transactions.filterTagged = filterTagged;\r\n\r\n        actionCreators.requestTransactions(accountId, pageNumber);\r\n    },\r\n\r\n    requestTransactions: (accountId: string, pageNumber: number) => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const state = getState();\r\n\r\n        if (state.transactions.areLoading) {\r\n            // Don't issue a duplicate request (we already have or are loading the requested data)\r\n            return;\r\n        }\r\n\r\n        dispatch({ type: RequestTransactions });\r\n\r\n        const service = new TransactionService(state);\r\n\r\n        try {\r\n\r\n            const transactions = await service.getTransactions(accountId, state.transactions.filterTagged, state.transactions.pageSize, pageNumber);\r\n            dispatch({ type: ReceiveTransactions, data: transactions });\r\n        }\r\n        catch (error) {\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n            dispatch({ type: ReceiveTransactions, data: [] });\r\n        }\r\n    },\r\n\r\n    addTransactionTag: (transactionId: string, tagId: number) => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const state = getState();\r\n\r\n        const service = new TransactionService(state);\r\n\r\n        try {\r\n            const transaction = await service.addTransactionTag(transactionId, tagId);\r\n            dispatch({ type: AddTransactionTag, data: transaction });\r\n        }\r\n        catch (error) {\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n\r\n    removeTransactionTag: (transactionId: string, tagId: number) => async (dispatch: Dispatch, getState: () => State) => {\r\n\r\n        const service = new TransactionService(getState());\r\n\r\n        try {\r\n            const transaction = await service.removeTransactionTag(transactionId, tagId);\r\n            dispatch({ type: RemoveTransactionTag, data: transaction });\r\n        }\r\n        catch (error) {\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n\r\n    createTagAndAdd: (transactionId: string, tagName: string) => async (dispatch: Dispatch, getState: () => State) => {\r\n        const state = getState();\r\n\r\n        const transactionTagService = new TransactionTagService(state);\r\n\r\n        const tag = await transactionTagService.createTag(tagName, []);\r\n\r\n        const service = new TransactionService(state);\r\n\r\n        try {\r\n            const transaction = await service.addTransactionTag(transactionId, tag.id);\r\n            dispatch({ type: AddTransactionTag, data: transaction });\r\n        }\r\n        catch (error) {\r\n            dispatch({ type: ShowMessage, data: error.message });\r\n        }\r\n    },\r\n};\r\n\r\nexport const reducer = (state: Transactions = initialState, action: ActionWithData<any>): Transactions => {\r\n\r\n    switch (action.type) {\r\n\r\n        case RequestTransactions:\r\n            return {\r\n                ...state,\r\n                areLoading: true,\r\n            };\r\n\r\n\r\n        case ReceiveTransactions:\r\n            return {\r\n                ...state,\r\n                transactions: action.data.transactions,\r\n                currentPage: action.data.currentPage,\r\n                total: action.data.total,\r\n                areLoading: false,\r\n            };\r\n\r\n        case AddTransactionTag: {\r\n            const index = state.transactions.findIndex((t) => t.id === action.data.id);\r\n            const transactions = [...state.transactions.slice(0, index), action.data, ...state.transactions.slice(index + 1)];\r\n            return {\r\n                ...state,\r\n                transactions: transactions,\r\n            };\r\n        }\r\n        case RemoveTransactionTag: {\r\n            const index = state.transactions.findIndex((t) => t.id === action.data.id);\r\n            const transactions = [...state.transactions.slice(0, index), action.data, ...state.transactions.slice(index + 1)];\r\n            return {\r\n                ...state,\r\n                transactions: transactions,\r\n            };\r\n        }\r\n        case SetTransactionListFilter: {\r\n            return {\r\n                ...state,\r\n                filterTagged: action.data,\r\n            }\r\n        }\r\n    }\r\n\r\n    return state;\r\n};\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionRow.tsx",["321"],"﻿import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport { Transaction, TransactionTag } from \"../../models\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { actionCreators } from \"../../store/Transactions\";\r\nimport { actionCreators as tagActionCreators } from \"../../store/TransactionTags\";\r\nimport { State } from \"../../store/state\";\r\nimport { TagPanel } from \"../../components\";\r\n\r\nexport const TransactionRow: React.FC<TransactionRowProps> = (props) => {\r\n\r\n    //const [editMode, setEditMode] = useState(false);\r\n    const transactionRow = useTransactionRowEvents(props);\r\n\r\n    const fullTagsList = useSelector((state: State) => state.transactionTags.tags);\r\n\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !transactionRow.tags.some((tt) => t.id === tt.id)));\r\n    }, [transactionRow.tags, fullTagsList]);\r\n\r\n    return (\r\n        <tr>\r\n            <td>{moment(props.transaction.transactionTime).format(\"YYYY-MM-DD\")}</td>\r\n            <td>{props.transaction.description}</td>\r\n            <td>{props.transaction.amount.toLocaleString(\"en-AU\", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n            <TagPanel as=\"td\" selectedItems={transactionRow.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={transactionRow.addTag} onRemove={transactionRow.removeTag} onCreate={transactionRow.createTag} allowCreate={true} />\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction useTransactionRowEvents(props: TransactionRowProps) {\r\n\r\n    const dispatch = useDispatch();\r\n    const [tags, setTags] = useState(props.transaction.tags);\r\n\r\n    useEffect(() => {\r\n        setTags(props.transaction.tags);\r\n    }, [props.transaction.tags]);\r\n\r\n    bindActionCreators(actionCreators, dispatch);\r\n    bindActionCreators(tagActionCreators, dispatch);\r\n\r\n    const createTag = (name: string) => {\r\n        dispatch(actionCreators.createTagAndAdd(props.transaction.id, name));\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        dispatch(actionCreators.addTransactionTag(props.transaction.id, tag.id));\r\n        setTags(tags.concat([tag]));\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        dispatch(actionCreators.removeTransactionTag(props.transaction.id, tag.id));\r\n        setTags(tags.filter((t) => t.id !== tag.id));\r\n    }\r\n\r\n    return {\r\n        createTag,\r\n        addTag,\r\n        removeTag,\r\n        tags,\r\n    };\r\n}\r\n\r\nexport interface TransactionRowProps {\r\n    transaction: Transaction;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactions\\TransactionRowIng.tsx",["322","323"],"﻿import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport { Transaction, TransactionTag } from \"../../models\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { actionCreators } from \"../../store/Transactions\";\r\nimport { actionCreators as tagActionCreators } from \"../../store/TransactionTags\";\r\nimport { State } from \"../../store/state\";\r\nimport { TagPanel } from \"../../components\";\r\nimport { TransactionRowProps } from \"./TransactionRow\";\r\n\r\nexport const TransactionRowIng: React.FC<TransactionRowProps> = (props) => {\r\n\r\n    //const [editMode, setEditMode] = useState(false);\r\n    const transactionRow = useTransactionRowEvents(props);\r\n\r\n    const fullTagsList = useSelector((state: State) => state.transactionTags.tags);\r\n\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => !transactionRow.tags.some((tt) => t.id === tt.id)));\r\n    }, [transactionRow.tags, fullTagsList]);\r\n\r\n    return (\r\n        <tr>\r\n            <td>{moment(props.transaction.transactionTime).format(\"YYYY-MM-DD\")}</td>\r\n            <td>{props.transaction.description}</td>\r\n            <td>{props.transaction.amount.toLocaleString(\"en-AU\", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n            <TagPanel as=\"td\" selectedItems={transactionRow.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={transactionRow.addTag} onRemove={transactionRow.removeTag} onCreate={transactionRow.createTag} allowCreate={true} />\r\n        </tr>\r\n    );\r\n}\r\n\r\nTransactionRowIng.displayName = \"TransactionRowIng\";\r\n\r\nfunction useTransactionRowEvents(props: TransactionRowProps) {\r\n\r\n    const dispatch = useDispatch();\r\n    const [tags, setTags] = useState(props.transaction.tags);\r\n\r\n    useEffect(() => {\r\n        setTags(props.transaction.tags);\r\n    }, [props.transaction.tags]);\r\n\r\n    bindActionCreators(actionCreators, dispatch);\r\n    bindActionCreators(tagActionCreators, dispatch);\r\n\r\n    const createTag = (name: string) => {\r\n        dispatch(actionCreators.createTagAndAdd(props.transaction.id, name));\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        dispatch(actionCreators.addTransactionTag(props.transaction.id, tag.id));\r\n        setTags(tags.concat([tag]));\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        dispatch(actionCreators.removeTransactionTag(props.transaction.id, tag.id));\r\n        setTags(tags.filter((t) => t.id !== tag.id));\r\n    }\r\n\r\n    return {\r\n        createTag,\r\n        addTag,\r\n        removeTag,\r\n        tags,\r\n    };\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\TagPanel.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTagRule.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\TransactionTag.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Transaction.ts",["324"],"﻿import { TransactionTag } from \"./TransactionTag\";\r\n\r\nexport enum TransactionType {\r\n    Credit = 1,\r\n    Debit = 2,\r\n    RecurringCredit = 3,\r\n    RecurringDebit = 4,\r\n    BalanceAdjustment = 5,\r\n}\r\n\r\nexport interface Transaction {\r\n    id: string;\r\n    reference: string;\r\n    accountId: string;\r\n    amount: number;\r\n    description: string;\r\n    transactionTime: Date;\r\n    transactionType: TransactionType;\r\n    tags: TransactionTag[];\r\n    extraInfo: any;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\ImporterType.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Account.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\pages\\transactionTags\\TransactionTagRow.tsx",["325","326"],"﻿import React, { useState, useEffect } from \"react\";\r\n\r\nimport { TransactionTag } from \"../../models\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { actionCreators } from \"../../store/TransactionTags\";\r\nimport { State } from \"../../store/state\";\r\nimport { TagPanel } from \"../../components/TagPanel\";\r\nimport { ClickableIcon } from \"../../components/ClickableIcon\";\r\n\r\nexport const TransactionTagRow: React.FC<TransactionTagRowProps> = (props) => {\r\n\r\n    const transactionRow = useTransactionTagRowEvents(props);\r\n\r\n    const fullTagsList = useSelector((state: State) => state.transactionTags.tags);\r\n\r\n    const [tagsList, setTagsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTagsList(fullTagsList.filter((t) => t.id !== props.tag.id && !transactionRow.tags.some((tt) => t.id === tt.id)));\r\n    }, [transactionRow.tags, fullTagsList]);\r\n\r\n    return (\r\n        <tr>\r\n            <td>{props.tag.name}</td>\r\n            <TagPanel as=\"td\" selectedItems={transactionRow.tags} allItems={tagsList} textField=\"name\" valueField=\"id\" onAdd={transactionRow.addTag} onRemove={transactionRow.removeTag} onCreate={transactionRow.createTag} allowCreate={true} />\r\n            <td><span onClick={transactionRow.deleteTag}><ClickableIcon icon=\"trash-alt\" title=\"Delete\" /></span></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction useTransactionTagRowEvents(props: TransactionTagRowProps) {\r\n\r\n    const dispatch = useDispatch();\r\n    const [tags, setTags] = useState(props.tag.tags);\r\n\r\n    useEffect(() => {\r\n        setTags(props.tag.tags);\r\n    }, [props.tag.tags]);\r\n\r\n    bindActionCreators(actionCreators, dispatch);\r\n\r\n    const createTag = (name: string) => {\r\n        dispatch(actionCreators.createTagAndAdd(props.tag.id, name));\r\n    }\r\n\r\n    const deleteTag = () => {\r\n\r\n        if (window.confirm(\"Deleting this tag will remove it from all rules and transactions. Are you sure?\")) {\r\n            dispatch(actionCreators.deleteTag(props.tag));\r\n        }\r\n    }\r\n\r\n    const addTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        dispatch(actionCreators.addTransactionTag(props.tag.id, tag.id));\r\n        setTags(tags.concat([tag]));\r\n    }\r\n\r\n    const removeTag = (tag: TransactionTag) => {\r\n\r\n        if (!tag.id) return;\r\n\r\n        dispatch(actionCreators.removeTransactionTag(props.tag.id, tag.id));\r\n        setTags(tags.filter((t) => t.id !== tag.id));\r\n    }\r\n\r\n    return {\r\n        createTag,\r\n        deleteTag,\r\n        addTag,\r\n        removeTag,\r\n        tags,\r\n    };\r\n}\r\n\r\nexport interface TransactionTagRowProps {\r\n    tag: TransactionTag;\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\Upload.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\PageHeader.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\ComboBox.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\CloseBadge.tsx",["327"],"﻿import \"./CloseBadge.scss\";\r\n\r\nimport React, { PropsWithChildren } from \"react\";\r\nimport { Badge, BadgeProps } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport const CloseBadge: React.FC<PropsWithChildren<CloseBadgeProps>> = (props) => {\r\n\r\n    const click = (e:React.MouseEvent<any, any>) => {\r\n        e.defaultPrevented = true;\r\n        e.stopPropagation();\r\n\r\n        props.onClose && props.onClose();\r\n    }\r\n\r\n    let { onClick, className, ...other } = props;\r\n\r\n    className = (className + \" close-badge\").trim();\r\n\r\n    return (<Badge {...other} className={className} >{props.children}<span onClick={click}><FontAwesomeIcon icon=\"times-circle\" /></span></Badge>);\r\n}\r\n\r\nCloseBadge.displayName = \"CloseBadge\";\r\n\r\nexport interface CloseBadgeProps extends BadgeProps {\r\n    onClose?: () => void;\r\n    onClick?: () => void;\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountSummary.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountBalance.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionTagRuleService.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionService.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\TransactionTagService.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ReferenceDataService.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ImportService.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\AccountList.tsx",["328"],"import \"./AccountList.scss\";\r\n\r\nimport React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport { AccountRow } from \"./AccountRow\";\r\n//import VirtualAccountRow from \"./VirtualAccountRow\";\r\nimport { getBalanceString } from \"../../helpers\";\r\nimport { useAccounts } from \"../../services\";\r\n\r\nexport const AccountList: React.FC<AccountListProps> = () => {\r\n\r\n    const accountsQuery = useAccounts();\r\n\r\n    const { data } = accountsQuery;\r\n\r\n    const virtualAccountRows = [];\r\n\r\n/*    if (virtualAccounts) {\r\n        for (const account of virtualAccounts) {\r\n            virtualAccountRows.push(<VirtualAccountRow key={account.virtualAccountId} account={account} />);\r\n        }\r\n    }*/\r\n\r\n    const accountRows = [];\r\n    if (data?.accounts) {\r\n        for (const account of data?.accounts) {\r\n            accountRows.push(<AccountRow key={account.id} account={account} />);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"account-list\">\r\n                <h2>Accounts</h2>\r\n\r\n                <Table className=\"accounts\" hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Current Balance</th>\r\n                            {/*<th>Available Balance</th>*/}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {accountRows}\r\n                    </tbody>\r\n                    <tfoot>\r\n                        <tr>\r\n                            <td>Position</td>\r\n                            <td>{getBalanceString(data?.position)}</td>\r\n                        </tr>\r\n                    </tfoot>\r\n                </Table>\r\n            </section>\r\n           {/* <section className=\"account-list\">\r\n                <h2>Virtual Accounts</h2>\r\n\r\n                <Table id=\"virtualAccounts\" className=\"accounts\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Balance</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {virtualAccountRows}\r\n                    </tbody>\r\n                </Table>\r\n    </section>*/}\r\n        </>\r\n    );\r\n}\r\n\r\nAccountList.displayName = \"AccountList\";\r\n\r\nexport interface AccountListProps {\r\n\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\HttpClient.ts",["329","330"],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\ServiceBase.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\Alert.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\VirtualAccountRow.tsx",["331"],"﻿import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { VirtualAccount } from \"../../store/state\";\r\n\r\nclass VirtualAccountRow extends Component<VirtualAccountRowProps, any> {\r\n\r\n    public render() {\r\n        return (\r\n            <tr>\r\n                <td className=\"account\">\r\n                    <div className=\"name\">{this.props.account.name}</div>\r\n                    <div className=\"description\">{this.props.account.description}</div>\r\n                    <nav className=\"desktop\">\r\n                        <ul>\r\n                            <li>\r\n                                <a href={\"/transactions/transfer/\" + this.props.account.virtualAccountId}>Transfer funds</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href={\"/transactions/history/\" + this.props.account.virtualAccountId}>Transactions</a>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>e\r\n                </td>\r\n                <td>{this.props.account.balance.toFixed(2) + \" \" + (this.props.account.balance < 0 ? \"D\" : \"C\") + \"R\"}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()(VirtualAccountRow);\r\n\r\ninterface VirtualAccountRowProps {\r\n    account: VirtualAccount;\r\n}\r\n",["332","333"],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\AccountRow.tsx",["334"],"﻿import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport * as Models from \"../../models\";\r\nimport { ActionTypes } from \"../../store/Accounts\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AccountController } from \"../../models\";\r\n\r\nimport { ManualAccountRow} from \"./ManualAccountRow\";\r\n\r\nexport const AccountRow: React.FC<AccountRowProps> = (props) => {\r\n\r\nconst { onRowClick } = useAccountRowCommonState(props);\r\n\r\n    switch (props.account.controller) {\r\n        case AccountController.Manual:\r\n            return <ManualAccountRow {...props} />\r\n        case AccountController.Import:\r\n    }\r\n\r\n    return (\r\n        <tr onClick={onRowClick} className=\"clickable\">\r\n            <td className=\"account\">\r\n                <div className=\"name\">{props.account.name}</div>\r\n            </td>\r\n            <td><span className={props.account.currentBalance < 0 ? \" negative\" : \"\"}>{props.account.currentBalance + (props.account.currentBalance < 0 ? \"D\" : \"C\") + \"R\"}</span></td>\r\n{/*}            <td><span className={props.account.availableBalance < 0 ? \" negative\" : \"\"}>{props.account.availableBalance + (props.account.availableBalance < 0 ? \"D\" : \"C\") + \"R\"}</span></td>*/}\r\n        </tr>\r\n    );\r\n}\r\n\r\nAccountRow.displayName = \"AccountRow\";\r\n\r\nexport interface AccountRowProps {\r\n    account: Models.Account;\r\n}\r\n\r\nexport const useAccountRowCommonState = (props: AccountRowProps) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    var history = useHistory();\r\n\r\n    const onRowClick = () => {\r\n        dispatch({ type: ActionTypes.SetSelectedAccount, data: props.account });\r\n        history.push(`accounts/${props.account.id}`);\r\n    };\r\n\r\n    return {\r\n        onRowClick,\r\n    };\r\n}\r\n\r\n/*const useRenderers = (props: AccountRowProps) => {\r\n\r\n    const renderManual = () => {\r\n\r\n    }\r\n\r\n    const renderImport = () => {\r\n\r\n    }\r\n\r\n    const getRenderer: Function = () => {\r\n        switch (props.account.controller) {\r\n            case AccountController.Manual:\r\n                return renderManual;\r\n                case AccountController.Import:\r\n                    return renderImport;\r\n\r\n        }\r\n\r\n        return {\r\n            useRenderers,\r\n        };\r\n\r\n    }\r\n}*/","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AccountList\\ManualAccountRow.tsx",["335","336","337","338","339","340"],"﻿import React, { useState, useRef } from \"react\";\r\nimport { getBalanceString } from \"../../helpers\";\r\n\r\nimport { AccountRowProps, useAccountRowCommonState } from \"./AccountRow\";\r\nimport { useClickAway } from \"../../hooks\";\r\n\r\nexport const ManualAccountRow: React.FC<AccountRowProps> = (props) => {\r\n\r\n    const { balanceRef, avBalanceRef, editingBalance, editingAvBalance, balanceClick, avBalanceClick, balanceChange, avBalanceChange, balance, avBalance } = useComponentState(props);\r\n    const { onRowClick } = useAccountRowCommonState(props);\r\n\r\n    return (\r\n        <tr onClick={onRowClick} className=\"clickable\">\r\n            <td className=\"account\">\r\n                <div className=\"name\">{props.account.name}</div>\r\n            </td>\r\n            <td onClick={balanceClick} ref={balanceRef}> {!editingBalance && <span className={props.account.currentBalance < 0 ? \" negative\" : \"\"}>{getBalanceString(balance)}</span>}\r\n                {editingBalance && <input type=\"number\" value={balance} onChange={balanceChange} />}\r\n            </td>\r\n            {/*<td onClick={avBalanceClick} ref={avBalanceRef}> {!editingAvBalance && <span className={props.account.availableBalance < 0 ? \" negative\" : \"\"}>{getBalanceString(avBalance)}</span>}\r\n                {editingAvBalance && <input type=\"number\" value={avBalance} onChange={avBalanceChange} />}\r\n            </td>*/}\r\n        </tr>\r\n    );\r\n}\r\n\r\nManualAccountRow.displayName = \"ManualAccountRow\";\r\n\r\nconst useComponentState = (props: AccountRowProps) => {\r\n\r\n    //const dispatch = useDispatch();\r\n    //const history = useHistory();\r\n\r\n    const [editingBalance, setEditingBalance] = useState(false);\r\n    const [editingAvBalance, setEditingAvBalance] = useState(false);\r\n\r\n    const [balance, setBalance] = useState(props.account.currentBalance);\r\n    const [avBalance, setAvBalance] = useState(props.account.availableBalance);\r\n\r\n    const balanceRef = useRef(null);\r\n    useClickAway(setEditingBalance, balanceRef);\r\n\r\n    const avBalanceRef = useRef(null);\r\n    useClickAway(setEditingAvBalance, avBalanceRef);\r\n\r\n    const balanceClick = (e: React.MouseEvent<HTMLTableDataCellElement>) => {\r\n        setEditingBalance(true);\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const avBalanceClick = (e: React.MouseEvent<HTMLTableDataCellElement>) => {\r\n        setEditingAvBalance(true);\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const balanceChange =(e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setBalance(parseFloat(e.currentTarget.value));\r\n    }\r\n\r\n    const avBalanceChange =(e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setAvBalance(parseFloat(e.currentTarget.value));\r\n    }\r\n\r\n    return {\r\n        balanceRef,\r\n        avBalanceRef,\r\n\r\n        editingBalance,\r\n        editingAvBalance,\r\n\r\n        balanceClick,\r\n        avBalanceClick,\r\n\r\n        balanceChange,\r\n        avBalanceChange,\r\n\r\n        balance,\r\n        avBalance,\r\n    };\r\n}\r\n\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\clickAway.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\hooks\\pageTitle.ts",["341"],"import { useEffect } from \"react\";\r\nimport { useApp } from \"../components\";\r\n\r\nexport function usePageTitle(title: string) {\r\n\r\n    const { appName } = useApp();\r\n\r\n    useEffect(() => {\r\n        document.title = `${title} : ${appName}`;\r\n    }, [title]);\r\n}","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\helpers\\index.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\helpers\\renderingHelpers.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\configureStore.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\ReferenceData.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Layout.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\store\\Security.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Footer.tsx",["342"],"﻿import React from \"react\";\r\n\r\nexport const Footer = () => (\r\n    <footer>\r\n        Copyright &copy; Andrew McLachlan 2013. All rights reserved.<br />\r\n        <a href=\"http://www.andrewmclachlan.com\">www.andrewmclachlan.com</a>\r\n    </footer>\r\n);\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\layouts\\Header.tsx",["343","344","345"],"﻿import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useApp, useMsal } from \"../components\";\r\n\r\nexport const Header: React.FC<HeaderProps> = (props) => {\r\n\r\n    const appState = useApp();\r\n\r\n    const { loading, isAuthenticated, login, logout } = useMsal();\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"container\">\r\n                <Link to=\"/\"><img src={appState.baseUrl + \"images/\" + appState.skin + \"/moo@2x.png\"} alt={appState.appName} className=\"desktop\" width=\"76\" height=\"111\" /><img src={appState.baseUrl + \"images/\" + appState.skin + \"/moo-small@2x.png\"} alt={appState.appName} className=\"img mobile\" width=\"99\" height=\"32\" /></Link>\r\n            </div>\r\n            <nav>\r\n                <ul>\r\n                    { !isAuthenticated && <li><a onClick={() => login(\"loginRedirect\")}>Login</a></li> }\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li className=\"desktop\"><Link to=\"/accounts\">Manage Accounts</Link></li>\r\n                    <li className=\"desktop\"><Link to=\"/settings\">Settings</Link></li>\r\n                    {isAuthenticated && <li><button onClick={() => logout() }>Logout</button></li>}\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\ninterface HeaderProps {\r\n}\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\MSALContext.tsx",["346"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport * as msal from \"@azure/msal-browser\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        getToken: (request: any, method: LoginMethod) => Promise<string>,\r\n        token: string,\r\n    }\r\n}\r\n\r\nconst ua = window.navigator.userAgent;\r\nconst msie = ua.indexOf(\"MSIE \");\r\nconst msie11 = ua.indexOf(\"Trident/\");\r\nconst msedge = ua.indexOf(\"Edge/\");\r\nconst isIE = msie > 0 || msie11 > 0;\r\nconst isEdge = msedge > 0;\r\n\r\nexport type LoginMethod = \"loginRedirect\" | \"loginPopup\";\r\n\r\nexport interface MsalContextValues {\r\n    isAuthenticated: boolean,\r\n    user: msal.AccountInfo,\r\n    token: string,\r\n    loading: boolean,\r\n    popupOpen: boolean,\r\n    loginError: any,\r\n    login: (method: \"loginRedirect\" | \"loginPopup\") => Promise<void>,\r\n    logout: () => void,\r\n    getToken: (request: any, method: LoginMethod) => Promise<string>,\r\n}\r\n  \r\nexport const msalConfig = {\r\n    auth: {\r\n        clientId: \"045f8afa-70f2-4700-ab75-77ac41b306f7\",\r\n        authority: \"https://login.microsoftonline.com/30efefb9-9034-4e0c-8c69-17f4578f5924\",\r\n    },\r\n    cache: {\r\n        cacheLocation: \"localStorage\", // This configures where your cache will be stored\r\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\r\n    }\r\n};\r\n\r\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\r\nexport const loginRequest = {\r\n    scopes: [\"openid\", \"profile\", \"User.Read\"],\r\n    forceRefresh: false // Set this to \"true\" to skip a cached token and go to the server to get a new token\r\n};\r\n\r\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\r\nexport const apiRequest = {\r\n    scopes: [\"api://bankplus.mclachlan.family/api.read\"],\r\n    forceRefresh: false // Set this to \"true\" to skip a cached token and go to the server to get a new token\r\n};\r\n\r\nexport interface MsalProviderProps {\r\n    children: any,\r\n    config: msal.Configuration,\r\n}\r\n\r\nexport const MsalContext = React.createContext<MsalContextValues | undefined>(undefined);\r\nexport const MsalProvider = ({\r\n    children,\r\n    config,\r\n}:MsalProviderProps) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState<boolean>();\r\n    const [user, setUser] = useState<msal.AccountInfo>();\r\n    const [token, setToken] = useState<string>();\r\n    const [publicClient, setPublicClient] = useState<msal.PublicClientApplication>();\r\n    const [loading, setLoading] = useState(false);\r\n    const [popupOpen, setPopupOpen] = useState(false);\r\n    const [loginError, setLoginError] = useState(false);\r\n\r\n    const getAccount = (pc: msal.PublicClientApplication): msal.AccountInfo => {\r\n        // need to call getAccount here?\r\n        const currentAccounts = pc.getAllAccounts();\r\n        if (currentAccounts === null) {\r\n            console.log(\"No accounts detected\");\r\n            return null;\r\n        }\r\n\r\n        if (currentAccounts.length > 1) {\r\n            // Add choose account code here\r\n            console.log(\"Multiple accounts detected, need to add choose account code.\");\r\n            return currentAccounts[0];\r\n        } else if (currentAccounts.length === 1) {\r\n            return currentAccounts[0];\r\n        }\r\n    }\r\n\r\n    \r\n    if (!publicClient) {\r\n        const pc: msal.PublicClientApplication = new msal.PublicClientApplication(config);\r\n\r\n        pc.handleRedirectPromise().then((response) => \r\n        {\r\n            setLoading(false);\r\n            if (response) {\r\n                setUser(getAccount(pc));\r\n                setIsAuthenticated(true);\r\n                if(response.accessToken) {\r\n                  setToken(response.accessToken);\r\n                }\r\n            } \r\n        }).catch(error => {\r\n            console.log(error);\r\n            setLoginError(error);\r\n        });\r\n\r\n        if (getAccount(pc)) {\r\n            setUser(getAccount(pc));\r\n            setIsAuthenticated(true);\r\n        }\r\n        \r\n        setPublicClient(pc);\r\n    }\r\n\r\n    const login = async (method: LoginMethod) => {\r\n        const signInType = (isIE || isEdge) ? \"loginRedirect\" : method;\r\n        if (signInType === \"loginPopup\") {\r\n            setPopupOpen(true);\r\n\r\n            try {\r\n                await publicClient.loginPopup(loginRequest);\r\n\r\n                if (getAccount(publicClient)) {\r\n                    setUser(getAccount(publicClient));\r\n                    setIsAuthenticated(true);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                setLoginError(error);\r\n            } finally {\r\n                setPopupOpen(false);\r\n            }\r\n        } else if (signInType === \"loginRedirect\") {\r\n            setLoading(true);\r\n\r\n            publicClient.loginRedirect(loginRequest)\r\n        }\r\n    }\r\n\r\n    const logout = () => {\r\n        publicClient.logout();\r\n    }\r\n\r\n    const getTokenPopup = async (request: any) => {\r\n        try {\r\n            request.account = user;\r\n            if (!request.account || request.account === null) return \"No Account\";\r\n\r\n            var token = (await publicClient.acquireTokenSilent(request)).accessToken;\r\n            setToken(token);\r\n            return token;\r\n        } catch (error) {\r\n            try {\r\n                setPopupOpen(true);\r\n                \r\n                const response = await publicClient.acquireTokenPopup(request);\r\n                setToken(response.accessToken);\r\n                return response.accessToken;\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n                setLoginError(error);\r\n            }\r\n            finally {\r\n                setPopupOpen(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const getTokenRedirect = async (request: msal.SilentRequest): Promise<string> => {\r\n        try {\r\n            request.account = user;\r\n            if (!request.account || request.account === null) return \"No Account\";\r\n\r\n            var token = (await publicClient.acquireTokenSilent(request)).accessToken;\r\n            setToken(token);\r\n            return token;\r\n        }\r\n        catch(error) {\r\n               \r\n            try{\r\n                setLoading(true);\r\n                publicClient.acquireTokenRedirect(request);\r\n            }\r\n            catch(error) { \r\n                console.log(error);\r\n                setLoginError(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    const getToken = async (request: any, method: LoginMethod): Promise<string> => {\r\n        const signInType = (isIE || isEdge)? \"loginRedirect\" : method;\r\n        if(signInType === \"loginRedirect\") {\r\n            return await getTokenRedirect(request);\r\n        } else\r\n        {\r\n            return await getTokenPopup(request);\r\n        }\r\n    }\r\n\r\n    window.getToken = getToken;\r\n\r\n    return (\r\n        <MsalContext.Provider\r\n            value={{\r\n                isAuthenticated,\r\n                user,\r\n                token,\r\n                loading,\r\n                popupOpen,\r\n                loginError,\r\n                login,\r\n                logout,\r\n                getToken\r\n            }}\r\n        >\r\n            {children}\r\n        </MsalContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useMsal = () => useContext(MsalContext);\r\n","K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\components\\AppProvider.tsx",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\models\\Accounts.ts",[],"K:\\Dev\\Asm\\BankPlus\\src\\Asm.BankPlus.Web\\ClientApp\\src\\services\\AccountService.ts",["347"],"import React from \"react\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport { Account, Accounts } from \"../models\";\r\nimport { httpClient } from \"./HttpClient\";\r\n\r\nexport const useAccounts = () => {\r\n\r\n    const url = `api/accounts`;\r\n\r\n    return useQuery([\"accounts\"], async () : Promise<Accounts> => (await httpClient.get(url)).data);\r\n}\r\n\r\nexport const useAccount = (accountId: string) => {\r\n    const url = `api/accounts/${accountId}`;\r\n\r\n    return useQuery([\"account\", accountId], async () : Promise<Account> => (await httpClient.get(url)).data);\r\n}",{"ruleId":"348","replacedBy":"349"},{"ruleId":"350","replacedBy":"351"},{"ruleId":"352","severity":1,"message":"353","line":44,"column":8,"nodeType":"354","endLine":44,"endColumn":10,"suggestions":"355"},{"ruleId":"356","severity":1,"message":"357","line":11,"column":10,"nodeType":"358","messageId":"359","endLine":11,"endColumn":23},{"ruleId":"356","severity":1,"message":"360","line":11,"column":25,"nodeType":"358","messageId":"359","endLine":11,"endColumn":37},{"ruleId":"356","severity":1,"message":"361","line":70,"column":12,"nodeType":"358","messageId":"359","endLine":70,"endColumn":20},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"366"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"367"},{"ruleId":"352","severity":1,"message":"368","line":36,"column":8,"nodeType":"354","endLine":36,"endColumn":47,"suggestions":"369"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"370"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"371"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"372"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"373"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"374"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"375"},{"ruleId":"356","severity":1,"message":"376","line":4,"column":10,"nodeType":"358","messageId":"359","endLine":4,"endColumn":21},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"377"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"378"},{"ruleId":"352","severity":1,"message":"379","line":21,"column":8,"nodeType":"354","endLine":21,"endColumn":43,"suggestions":"380"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"381"},{"ruleId":"356","severity":1,"message":"382","line":17,"column":11,"nodeType":"358","messageId":"359","endLine":17,"endColumn":29},{"ruleId":"356","severity":1,"message":"383","line":2,"column":10,"nodeType":"358","messageId":"359","endLine":2,"endColumn":17},{"ruleId":"356","severity":1,"message":"384","line":4,"column":10,"nodeType":"358","messageId":"359","endLine":4,"endColumn":20},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"385"},{"ruleId":"348","replacedBy":"386"},{"ruleId":"350","replacedBy":"387"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"388"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"389"},{"ruleId":"356","severity":1,"message":"390","line":9,"column":25,"nodeType":"358","messageId":"359","endLine":9,"endColumn":37},{"ruleId":"356","severity":1,"message":"391","line":9,"column":55,"nodeType":"358","messageId":"359","endLine":9,"endColumn":71},{"ruleId":"356","severity":1,"message":"392","line":9,"column":87,"nodeType":"358","messageId":"359","endLine":9,"endColumn":101},{"ruleId":"356","severity":1,"message":"393","line":9,"column":118,"nodeType":"358","messageId":"359","endLine":9,"endColumn":133},{"ruleId":"356","severity":1,"message":"394","line":9,"column":144,"nodeType":"358","messageId":"359","endLine":9,"endColumn":153},{"ruleId":"352","severity":1,"message":"395","line":10,"column":8,"nodeType":"354","endLine":10,"endColumn":15,"suggestions":"396"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"397"},{"ruleId":"362","severity":1,"message":"363","line":1,"column":1,"nodeType":"364","messageId":"365","fix":"398"},{"ruleId":"356","severity":1,"message":"399","line":10,"column":13,"nodeType":"358","messageId":"359","endLine":10,"endColumn":20},{"ruleId":"400","severity":1,"message":"401","line":19,"column":47,"nodeType":"402","endLine":19,"endColumn":89},{"ruleId":"356","severity":1,"message":"403","line":1,"column":27,"nodeType":"358","messageId":"359","endLine":1,"endColumn":36},{"ruleId":"356","severity":1,"message":"404","line":1,"column":8,"nodeType":"358","messageId":"359","endLine":1,"endColumn":13},"no-native-reassign",["405"],"no-negated-in-lhs",["406"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getToken'. Either include it or remove the dependency array.","ArrayExpression",["407"],"@typescript-eslint/no-unused-vars","'BsPrefixProps' is defined but never used.","Identifier","unusedVar","'ReplaceProps' is defined but never used.","'tagsList' is assigned a value but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"408","text":"409"},{"range":"410","text":"409"},"React Hook useEffect has a missing dependency: 'pageNumber'. Either include it or remove the dependency array.",["411"],{"range":"412","text":"409"},{"range":"413","text":"409"},{"range":"414","text":"409"},{"range":"415","text":"409"},{"range":"416","text":"409"},{"range":"417","text":"409"},"'Transaction' is defined but never used.",{"range":"418","text":"409"},{"range":"419","text":"409"},"React Hook useEffect has a missing dependency: 'props.tag.id'. Either include it or remove the dependency array. If 'setTagsList' needs the current value of 'props.tag.id', you can also switch to useReducer instead of useState and read 'props.tag.id' in the reducer.",["420"],{"range":"421","text":"409"},"'virtualAccountRows' is assigned a value but never used.","'request' is defined but never used.","'apiRequest' is defined but never used.",{"range":"422","text":"409"},["405"],["406"],{"range":"423","text":"409"},{"range":"424","text":"409"},"'avBalanceRef' is assigned a value but never used.","'editingAvBalance' is assigned a value but never used.","'avBalanceClick' is assigned a value but never used.","'avBalanceChange' is assigned a value but never used.","'avBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'appName'. Either include it or remove the dependency array.",["425"],{"range":"426","text":"409"},{"range":"427","text":"409"},"'loading' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"428","fix":"429"},[-1,0],"",[-1,0],{"desc":"430","fix":"431"},[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],{"desc":"432","fix":"433"},[-1,0],[-1,0],[-1,0],[-1,0],{"desc":"434","fix":"435"},[-1,0],[-1,0],"Update the dependencies array to be: [getToken]",{"range":"436","text":"437"},"Update the dependencies array to be: [dispatch, props.account, filterTagged, pageNumber]",{"range":"438","text":"439"},"Update the dependencies array to be: [transactionRow.tags, fullTagsList, props.tag.id]",{"range":"440","text":"441"},"Update the dependencies array to be: [appName, title]",{"range":"442","text":"443"},[1786,1788],"[getToken]",[1638,1677],"[dispatch, props.account, filterTagged, pageNumber]",[878,913],"[transactionRow.tags, fullTagsList, props.tag.id]",[246,253],"[appName, title]"]